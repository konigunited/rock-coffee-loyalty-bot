import TelegramBot from 'node-telegram-bot-api';
import { ClientService } from '../services/client.service';
import { PointService } from '../services/point.service';
import { UserService } from '../services/user.service';
import { BotContext } from '../middleware/access.middleware';

// Helper function to extract first name from contact
function getFirstName(contact: TelegramBot.Contact | null, fullName?: string): string {
  if (contact?.first_name) {
    return contact.first_name;
  }
  
  if (fullName) {
    const parts = fullName.trim().split(' ');
    if (parts.length >= 2) {
      return parts[1]; // Return first name (–ò–≤–∞–Ω from "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω")
    }
    return parts[0];
  }
  
  return '–î—Ä—É–≥';
}

// Helper function to get last name from contact
function getLastName(contact: TelegramBot.Contact | null): string | null {
  return contact?.last_name || null;
}

export class ClientHandler {
  private bot: TelegramBot;
  private clientService: ClientService;
  private pointService: PointService;
  private userService: UserService;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.clientService = new ClientService();
    this.pointService = new PointService();
    this.userService = new UserService();
  }

  // Start authentication process - now simplified to just contact sharing
  async startAuthentication(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) {
      return;
    }

    try {
      // Check if user is already authenticated
      const existingClient = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (existingClient) {
        await this.showMainMenu(ctx);
        return;
      }

      // Check if user is staff
      const staff = await this.userService.getByTelegramId(ctx.from.id);
      if (staff && ['barista', 'manager', 'admin'].includes(staff.role)) {
        await this.bot.sendMessage(ctx.message.chat.id, 
          'üë®‚Äçüíº –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–π –ø–∞–Ω–µ–ª–∏.'
        );
        return;
      }

      // Show contact sharing request
      await this.requestContact(ctx);

    } catch (error) {
      console.error('Start authentication error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Request contact sharing
  private async requestContact(ctx: BotContext): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const welcomeMessage = 
      'üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!*\n\n' +
      '‚òï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É!\n\n' +
      'üéØ *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:*\n' +
      '‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n' +
      '‚Ä¢ –°–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n' +
      '‚Ä¢ –ë–æ–Ω—É—Å—ã –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n' +
      '‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–µ–∑ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n' +
      'üì± *–î–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:*';

    const keyboard: TelegramBot.ReplyKeyboardMarkup = {
      keyboard: [
        [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]
      ],
      one_time_keyboard: true,
      resize_keyboard: true
    };

    await this.bot.sendMessage(ctx.message.chat.id, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    // Set session to wait for contact
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.waitingFor = 'contact_auth';
  }

  // Process contact sharing for authentication
  async processContactAuth(ctx: BotContext, contact: TelegramBot.Contact): Promise<void> {
    if (!ctx.message?.chat?.id || !ctx.from) return;

    try {
      // Normalize phone number
      const normalizedPhone = this.normalizePhone(contact.phone_number);

      if (!this.validatePhone(normalizedPhone)) {
        await this.bot.sendMessage(ctx.message.chat.id,
          '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ.\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.',
          { reply_markup: { remove_keyboard: true } }
        );
        return;
      }

      // Extract names from contact
      const firstName = getFirstName(contact);
      const lastName = getLastName(contact);

      // Find or create client using database function
      const result = await this.clientService.findOrCreateByPhone(
        normalizedPhone, 
        ctx.from.id,
        firstName,
        lastName
      );

      if (!result) {
        throw new Error('Failed to authenticate or create client');
      }

      const { client_id, is_new_client, card_number, full_name, balance } = result;

      // Clear contact auth session
      if (ctx.session) {
        delete ctx.session.waitingFor;
      }

      if (is_new_client) {
        // For new clients, ask for name after contact auth
        await this.requestNameInput(ctx, { client_id, card_number, full_name, balance });
      } else {
        // For existing clients, show returning message and main menu
        await this.showReturningClientMessage(ctx, { card_number, full_name, balance });
        setTimeout(async () => {
          await this.showMainMenu(ctx);
        }, 2500);
      }

    } catch (error) {
      console.error('Process contact auth error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.',
        { reply_markup: { remove_keyboard: true } }
      );
    }
  }

  // Show welcome message for new clients
  private async showWelcomeMessage(ctx: BotContext, clientData: any): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const welcomeMessage = 
      'üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!*\n\n' +
      `üë§ ${clientData.full_name}\n` +
      `üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: \`${clientData.card_number}\`\n` +
      `üí∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: *${clientData.balance} –±–∞–ª–ª–æ–≤*\n\n` +
      `‚òï *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n` +
      `‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –±–∞—Ä–∏—Å—Ç–∞\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
      `‚Ä¢ –¢—Ä–∞—Ç—å—Ç–µ –±–∞–ª–ª—ã –Ω–∞ —Å–∫–∏–¥–∫–∏\n\n` +
      `üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é Rock Coffee!`;

    await this.bot.sendMessage(ctx.message.chat.id, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: { remove_keyboard: true }
    });
  }

  // Request name input for new clients
  private async requestNameInput(ctx: BotContext, clientData: any): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const nameRequestMessage = 
      'üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!*\n\n' +
      `üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: \`${clientData.card_number}\`\n` +
      `üí∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: *${clientData.balance} –±–∞–ª–ª–æ–≤*\n\n` +
      'üë§ *–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?*\n' +
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–æ–¥–Ω–æ —Å–ª–æ–≤–æ):\n\n' +
      'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–µ–π, –ú–∞—Ä–∏—è, –î–º–∏—Ç—Ä–∏–π';

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_name_input' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id, nameRequestMessage, {
      parse_mode: 'Markdown',
      reply_markup: { 
        inline_keyboard: keyboard,
        remove_keyboard: true 
      }
    });

    // Set session to wait for name
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.waitingFor = 'contact_auth_name';
    ctx.session.clientData = clientData;
  }

  // Process name input after contact auth
  async processContactAuthName(ctx: BotContext, name: string): Promise<void> {
    if (!ctx.message?.chat?.id || !ctx.from) return;

    // Skip if empty
    if (name === 'skip') {
      await this.completeContactAuth(ctx);
      return;
    }

    // Validate single word name
    if (!this.validateSingleWordName(name)) {
      await this.bot.sendMessage(ctx.message.chat.id,
        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ.\n\n' +
        '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –ê–ª–µ–∫—Å–µ–π, –ú–∞—Ä–∏—è, –î–º–∏—Ç—Ä–∏–π\n' +
        '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤, –¥–≤–∞ —Å–ª–æ–≤–∞'
      );
      return;
    }

    try {
      // Update client's name
      await this.clientService.updateProfile(ctx.from.id, {
        full_name: name.trim(),
        first_name: name.trim()
      });

      await this.completeContactAuth(ctx, name.trim());

    } catch (error) {
      console.error('Process contact auth name error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.');
    }
  }

  // Complete contact authentication flow
  private async completeContactAuth(ctx: BotContext, name?: string): Promise<void> {
    if (!ctx.message?.chat?.id || !ctx.session?.clientData) return;

    const clientData = ctx.session.clientData;

    const completionMessage = 
      '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +
      `üë§ ${name || '–î—Ä—É–≥'}\n` +
      `üí≥ –ö–∞—Ä—Ç–∞: \`${clientData.card_number}\`\n` +
      `üí∞ –ë–∞–ª–∞–Ω—Å: *${clientData.balance} –±–∞–ª–ª–æ–≤*\n\n` +
      'üéØ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n' +
      '‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –±–∞—Ä–∏—Å—Ç–∞\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n' +
      '‚Ä¢ –¢—Ä–∞—Ç—å—Ç–µ –±–∞–ª–ª—ã –Ω–∞ —Å–∫–∏–¥–∫–∏\n\n' +
      '‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é Rock Coffee!';

    await this.bot.sendMessage(ctx.message.chat.id, completionMessage, {
      parse_mode: 'Markdown',
      reply_markup: { remove_keyboard: true }
    });

    // Clear session
    if (ctx.session) {
      delete ctx.session.waitingFor;
      delete ctx.session.clientData;
    }

    // Show main menu after delay
    setTimeout(async () => {
      await this.showMainMenu(ctx);
    }, 2500);
  }

  // Show returning client message
  private async showReturningClientMessage(ctx: BotContext, clientData: any): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const welcomeMessage = 
      'üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!*\n\n' +
      `üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: \`${clientData.card_number}\`\n` +
      `üí∞ –ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤: *${clientData.balance}*\n\n` +
      `‚òï –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ Rock Coffee!`;

    await this.bot.sendMessage(ctx.message.chat.id, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: { remove_keyboard: true }
    });
  }

  // Show main client menu
  async showMainMenu(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startAuthentication(ctx);
        return;
      }

      const firstName = client.first_name || getFirstName(null, client.full_name);
      const lastVisitText = client.last_visit 
        ? new Date(client.last_visit).toLocaleDateString('ru-RU')
        : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–ø–µ—Ä–≤—ã–µ!';

      const welcomeText = 
        `‚òï *Rock Coffee*\n\n` +
        `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: \`${client.card_number}\`\n` +
        `üí∞ –ë–∞–ª–ª—ã: *${client.balance}*\n` +
        `üìÖ ${lastVisitText}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' },
          { text: '‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }
        ],
        [
          { text: 'üìç –ù–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è', callback_data: 'coffee_shops' },
          { text: 'üì± –°–æ—Ü. —Å–µ—Ç–∏', callback_data: 'social_media' }
        ],
        [
          { text: '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', callback_data: 'about_program' }
        ]
      ];

      // Show profile completion reminder if needed
      if (client.auth_method === 'phone_contact' && !client.profile_completed) {
        keyboard.unshift([
          { text: 'üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'complete_profile' }
        ]);
      }

      await this.bot.sendMessage(ctx.message.chat.id, welcomeText, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Show main menu error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
    }
  }

  // Show loyalty card
  async showLoyaltyCard(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startAuthentication(ctx);
        return;
      }

      // Get recent transactions
      const recentTransactions = await this.pointService.getClientTransactions(client.id, 5);
      
      const lastVisitText = client.last_visit
        ? new Date(client.last_visit).toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })
        : '–ù–∏–∫–æ–≥–¥–∞';

      let cardMessage = 
        `üí≥ *–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*\n\n` +
        `üë§ ${client.full_name}\n` +
        `üÜî –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${client.card_number}\`\n` +
        `üí∞ –ë–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${lastVisitText}\n` +
        `üî¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: *${client.visit_count}*\n\n`;

      if (recentTransactions.length > 0) {
        cardMessage += `üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n`;
        recentTransactions.forEach(transaction => {
          const icon = transaction.points > 0 ? '‚ûï' : '‚ûñ';
          const date = new Date(transaction.created_at).toLocaleDateString('ru-RU');
          cardMessage += `${icon} ${Math.abs(transaction.points)} –±–∞–ª–ª–æ–≤ (${date})\n`;
        });
      } else {
        cardMessage += `üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n`;
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_card' }],
        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, cardMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Show loyalty card error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.');
    }
  }

  // Show client profile
  async showProfile(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startAuthentication(ctx);
        return;
      }

      const birthDateText = client.birth_date 
        ? new Date(client.birth_date).toLocaleDateString('ru-RU')
        : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

      const authMethodText = {
        'full_registration': '–ü–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'phone_contact': '–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'manual': '–í—Ä—É—á–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'
      }[client.auth_method as string] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

      const profileMessage = 
        `‚öôÔ∏è *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
        `üë§ –§–ò–û: ${client.full_name}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDateText}\n` +
        `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(client.created_at).toLocaleDateString('ru-RU')}\n` +
        `üîê –°–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞: ${authMethodText}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_name' },
          { text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data: 'edit_phone' }
        ],
        [
          { text: 'üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'edit_birthday' }
        ],
        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, profileMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Show profile error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  }

  // Start profile completion for phone-only clients
  async startProfileCompletion(ctx: BotContext): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const completionMessage = 
      'üìù *–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n' +
      '–í—ã –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤?\n\n' +
      'üéÇ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!\n\n' +
      'üë§ *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:*\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á';

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_profile_completion' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'client_main_menu' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id, completionMessage, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard, remove_keyboard: true }
    });

    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.waitingFor = 'profile_full_name';
  }

  // Process full name for profile completion
  async processProfileFullName(ctx: BotContext, fullName: string): Promise<void> {
    if (!ctx.message?.chat?.id || !ctx.from) return;

    if (!this.validateFullName(fullName)) {
      await this.bot.sendMessage(ctx.message.chat.id,
        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –∏ –ò–º—è).\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
      );
      return;
    }

    try {
      // Update client's full name and first name
      await this.clientService.updateProfile(ctx.from.id, {
        full_name: fullName.trim(),
        first_name: getFirstName(null, fullName.trim())
      });

      const birthdayMessage = 
        'üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):*\n\n' +
        '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.06.1990\n\n' +
        'üí° –ù—É–∂–Ω–æ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!';

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'complete_profile_final' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'client_main_menu' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, birthdayMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      if (ctx.session) {
        ctx.session.waitingFor = 'profile_birth_date';
      }

    } catch (error) {
      console.error('Process profile full name error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  }

  // Process birth date for profile completion
  async processProfileBirthDate(ctx: BotContext, birthDate: string): Promise<void> {
    if (!birthDate || birthDate === 'skip') {
      await this.completeProfile(ctx);
      return;
    }

    if (!this.validateBirthDate(birthDate)) {
      await this.bot.sendMessage(ctx.message.chat.id!,
        '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06.1990)'
      );
      return;
    }

    await this.completeProfile(ctx, birthDate);
  }

  // Complete profile setup
  private async completeProfile(ctx: BotContext, birthDate?: string): Promise<void> {
    if (!ctx.from) return;

    try {
      await this.clientService.completeProfile(ctx.from.id, birthDate);

      const successMessage = 
        '‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ø–æ–ª–Ω–µ–Ω!*\n\n' +
        (birthDate ? 'üéÇ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –∫ –Ω–∞–º –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞ –±–æ–Ω—É—Å–æ–º!\n\n' : '') +
        '‚òï –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.';

      await this.bot.sendMessage(ctx.message.chat.id!, successMessage, {
        parse_mode: 'Markdown'
      });

      // Clear session
      if (ctx.session) {
        delete ctx.session.waitingFor;
      }

      // Show updated main menu
      setTimeout(async () => {
        await this.showMainMenu(ctx);
      }, 2000);

    } catch (error) {
      console.error('Complete profile error:', error);
      await this.bot.sendMessage(ctx.message.chat.id!, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  }

  // Show coffee shop information
  async showCoffeeShops(ctx: BotContext): Promise<void> {
    const shopInfo = 
      `üìç *Rock Coffee*\n\n` +
      `üè™ **–ù–∞—à –∞–¥—Ä–µ—Å:**\n` +
      `—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 4\n` +
      `–≥. –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥\n\n` +
      `‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**\n` +
      `–ü–Ω-–í—Å: 9:00 - 21:00`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url: 'https://yandex.ru/maps?whatshere%5Bpoint%5D=20.475075692115222%2C54.72108365189035&whatshere%5Bzoom%5D=16.0&ll=20.475075692115215%2C54.721083651502035&z=16.0&si=gdvp5w39jyyx0q54jj7byzrd6r' }],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id!, shopInfo, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // Show social media links
  async showSocialMedia(ctx: BotContext): Promise<void> {
    const socialMessage = 
      `üì± *–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏*\n\n` +
      `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∞–∫—Ü–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏:`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üí¨ Telegram', url: 'https://t.me/rock_coffee_kld' }],
      [{ text: 'üì± –î—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏', url: 'https://www.instagram.com/rockcoffee.kld?utm_source=qr&igsh=NzV2Y3Z4cjNiM2ly' }],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id!, socialMessage, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // Show program information
  async showAboutProgram(ctx: BotContext): Promise<void> {
    const aboutMessage = 
      `‚ÑπÔ∏è *–û –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*\n\n` +
      `üíé **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n` +
      `‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –≤—Ö–æ–¥–∞\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
      `‚Ä¢ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ –Ω–∞–ø–∏—Ç–∫–∏\n` +
      `‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –±–µ–∑ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n` +
      `‚ùì **–í–æ–ø—Ä–æ—Å—ã?**\n` +
      `–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –±–∞—Ä–∏—Å—Ç–∞!`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id!, aboutMessage, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // Validation methods
  private validateFullName(name: string): boolean {
    if (!name || name.trim().length < 5) return false;
    const parts = name.trim().split(/\s+/);
    return parts.length >= 2 && /^[–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(name);
  }

  private validatePhone(phone: string): boolean {
    return /^\+7\d{10}$/.test(phone);
  }

  private validateBirthDate(date: string): boolean {
    if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date)) return false;
    
    const [day, month, year] = date.split('.').map(Number);
    const birthDate = new Date(year, month - 1, day);
    const today = new Date();
    
    return birthDate < today && year > 1900;
  }

  // Validate single word name
  private validateSingleWordName(name: string): boolean {
    if (!name || name.trim().length === 0) return false;
    const trimmed = name.trim();
    
    // Check that it's a single word (no spaces)
    if (trimmed.includes(' ')) return false;
    
    // Check that it contains only letters (Russian or English)
    if (!/^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$/.test(trimmed)) return false;
    
    // Check reasonable length
    if (trimmed.length < 2 || trimmed.length > 20) return false;
    
    return true;
  }

  // Normalize phone number to +7XXXXXXXXXX format
  private normalizePhone(phone: string): string {
    const digits = phone.replace(/\D/g, '');
    
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.substring(1);
    } else if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    } else if (digits.length === 10) {
      return '+7' + digits;
    }
    
    return '+' + digits;
  }

}