import TelegramBot from 'node-telegram-bot-api';
import { ClientService } from '../services/client.service';
import { PointService } from '../services/point.service';
import { UserService } from '../services/user.service';
import { BotContext, getCurrentUser } from '../middleware/access.middleware';
import { CreateClientData } from '../types/client.types';

export class ClientHandler {
  private bot: TelegramBot;
  private clientService: ClientService;
  private pointService: PointService;
  private userService: UserService;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.clientService = new ClientService();
    this.pointService = new PointService();
    this.userService = new UserService();
  }

  // Start client registration process
  async startRegistration(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) {
      return;
    }

    try {
      // Check if user is already registered
      const existingClient = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (existingClient) {
        await this.showMainMenu(ctx);
        return;
      }

      // Check if user is staff
      const staff = await this.userService.getByTelegramId(ctx.from.id);
      if (staff && ['barista', 'manager', 'admin'].includes(staff.role)) {
        // Staff should not register as clients
        await this.bot.sendMessage(ctx.message.chat.id, 
          'üë®‚Äçüíº –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–π –ø–∞–Ω–µ–ª–∏.'
        );
        return;
      }

      const welcomeMessage = 
        'üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!*\n\n' +
        '‚òï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É!\n\n' +
        'üéØ *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:*\n' +
        '‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é\n' +
        '‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é\n' +
        '‚Ä¢ –ë–æ–Ω—É—Å—ã –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n' +
        '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n\n' +
        'üë§ *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:*\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á';

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_registration' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      // Initialize registration session
      if (!ctx.session) {
        ctx.session = {};
      }
      ctx.session.registration = {};
      ctx.session.waitingFor = 'full_name';

    } catch (error) {
      console.error('Start registration error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // Process full name input
  async processFullName(ctx: BotContext, fullName: string): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    // Validate full name
    if (!this.validateFullName(fullName)) {
      await this.bot.sendMessage(ctx.message.chat.id,
        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –∏ –ò–º—è).\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
      );
      return;
    }

    if (!ctx.session?.registration) {
      await this.startRegistration(ctx);
      return;
    }

    ctx.session.registration.fullName = fullName.trim();

    const phoneMessage = 
      'üì± *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n' +
      '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: +7900123456';

    await this.bot.sendMessage(ctx.message.chat.id, phoneMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [
          [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]
        ],
        one_time_keyboard: true,
        resize_keyboard: true
      }
    });

    ctx.session.waitingFor = 'phone';
  }

  // Process phone input
  async processPhone(ctx: BotContext, phone: string): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    // Normalize phone number
    const normalizedPhone = this.normalizePhone(phone);

    if (!this.validatePhone(normalizedPhone)) {
      await this.bot.sendMessage(ctx.message.chat.id,
        '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX',
        { reply_markup: { remove_keyboard: true } }
      );
      return;
    }

    // Check if phone is already registered
    try {
      const existingClient = await this.clientService.getByPhone(normalizedPhone);
      if (existingClient) {
        await this.bot.sendMessage(ctx.message.chat.id,
          '‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
          '–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.',
          { reply_markup: { remove_keyboard: true } }
        );
        return;
      }
    } catch (error) {
      console.error('Phone check error:', error);
    }

    if (!ctx.session?.registration) {
      await this.startRegistration(ctx);
      return;
    }

    ctx.session.registration.phone = normalizedPhone;

    const birthdayMessage = 
      'üéÇ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):*\n\n' +
      '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.06.1990\n\n' +
      'üí° –ù—É–∂–Ω–æ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤!';

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_birthday' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', callback_data: 'cancel_registration' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id, birthdayMessage, {
      parse_mode: 'Markdown',
      reply_markup: { 
        inline_keyboard: keyboard,
        remove_keyboard: true 
      }
    });

    ctx.session.waitingFor = 'birth_date';
  }

  // Process birth date input
  async processBirthDate(ctx: BotContext, birthDate: string): Promise<void> {
    if (!birthDate || birthDate === 'skip') {
      await this.completeRegistration(ctx);
      return;
    }

    if (!this.validateBirthDate(birthDate)) {
      await this.bot.sendMessage(ctx.message.chat.id!,
        '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06.1990)'
      );
      return;
    }

    if (!ctx.session?.registration) {
      await this.startRegistration(ctx);
      return;
    }

    ctx.session.registration.birthDate = birthDate;
    await this.completeRegistration(ctx);
  }

  // Complete registration process
  async completeRegistration(ctx: BotContext): Promise<void> {
    if (!ctx.message?.chat?.id || !ctx.session?.registration) {
      await this.startRegistration(ctx);
      return;
    }

    const { fullName, phone, birthDate } = ctx.session.registration;

    if (!fullName || !phone) {
      await this.startRegistration(ctx);
      return;
    }

    try {
      // Create new client
      const clientData: CreateClientData = {
        telegram_id: ctx.from!.id,
        card_number: await this.clientService.generateCardNumber(),
        full_name: fullName,
        phone,
        birth_date: birthDate || null
      };

      const clientId = await this.clientService.create(clientData, 0); // System created
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        throw new Error('Failed to create client');
      }

      const successMessage = 
        '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n' +
        `üë§ ${client.full_name}\n` +
        `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${client.card_number}\`\n` +
        `üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n\n` +
        `üéØ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n` +
        `‚Ä¢ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞—Ä–∏—Å—Ç–æ–π/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n` +
        `‚Ä¢ –ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é\n` +
        `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n\n` +
        `‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!`;

      await this.bot.sendMessage(ctx.message.chat.id, successMessage, {
        parse_mode: 'Markdown',
        reply_markup: { remove_keyboard: true }
      });

      // Clear registration session
      delete ctx.session.registration;
      delete ctx.session.waitingFor;

      // Show main menu after short delay
      setTimeout(async () => {
        await this.showMainMenu(ctx);
      }, 2000);

    } catch (error) {
      console.error('Complete registration error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    }
  }

  // Show main client menu
  async showMainMenu(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startRegistration(ctx);
        return;
      }

      const firstName = client.full_name.split(' ')[0];
      const lastVisitText = client.last_visit 
        ? new Date(client.last_visit).toLocaleDateString('ru-RU')
        : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–ø–µ—Ä–≤—ã–µ!';

      const welcomeText = 
        `‚òï *Rock Coffee*\n\n` +
        `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: \`${client.card_number}\`\n` +
        `üí∞ –ë–∞–ª–ª—ã: *${client.balance}*\n` +
        `üìÖ ${lastVisitText}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' },
          { text: '‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }
        ],
        [
          { text: 'üìç –ù–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è', callback_data: 'coffee_shops' },
          { text: 'üì± –°–æ—Ü. —Å–µ—Ç–∏', callback_data: 'social_media' }
        ],
        [
          { text: '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', callback_data: 'about_program' }
        ]
      ];

      const messageOptions: TelegramBot.SendMessageOptions = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      };

      // Always send new message for stability
      await this.bot.sendMessage(ctx.message.chat.id, welcomeText, messageOptions);

    } catch (error) {
      console.error('Show main menu error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
    }
  }

  // Show loyalty card
  async showLoyaltyCard(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startRegistration(ctx);
        return;
      }

      // Get recent transactions
      const recentTransactions = await this.pointService.getClientTransactions(client.id, 5);
      
      const lastVisitText = client.last_visit
        ? new Date(client.last_visit).toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })
        : '–ù–∏–∫–æ–≥–¥–∞';

      let cardMessage = 
        `üí≥ *–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*\n\n` +
        `üë§ ${client.full_name}\n` +
        `üÜî –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${client.card_number}\`\n` +
        `üí∞ –ë–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${lastVisitText}\n` +
        `üî¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: *${client.visit_count}*\n\n`;

      if (recentTransactions.length > 0) {
        cardMessage += `üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n`;
        recentTransactions.forEach(transaction => {
          const icon = transaction.points > 0 ? '‚ûï' : '‚ûñ';
          const date = new Date(transaction.created_at).toLocaleDateString('ru-RU');
          cardMessage += `${icon} ${Math.abs(transaction.points)} –±–∞–ª–ª–æ–≤ (${date})\n`;
        });
      } else {
        cardMessage += `üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n`;
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_card' }],
        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
      ];

      await this.editOrSendMessage(ctx, cardMessage, keyboard);

    } catch (error) {
      console.error('Show loyalty card error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.');
    }
  }

  // Show client profile
  async showProfile(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const client = await this.clientService.getByTelegramId(ctx.from.id);
      
      if (!client) {
        await this.startRegistration(ctx);
        return;
      }

      const birthDateText = client.birth_date 
        ? new Date(client.birth_date).toLocaleDateString('ru-RU')
        : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

      const profileMessage = 
        `‚öôÔ∏è *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
        `üë§ –§–ò–û: ${client.full_name}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}\n` +
        `üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDateText}\n` +
        `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(client.created_at).toLocaleDateString('ru-RU')}\n` +
        `üèÜ –°—Ç–∞—Ç—É—Å: ${this.getClientStatus(client.visit_count || 0)}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_name' },
          { text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data: 'edit_phone' }
        ],
        [
          { text: 'üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'edit_birthday' }
        ],
        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
      ];

      await this.editOrSendMessage(ctx, profileMessage, keyboard);

    } catch (error) {
      console.error('Show profile error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  }

  // Show coffee shop information
  async showCoffeeShops(ctx: BotContext): Promise<void> {
    const shopInfo = 
      `üìç *Rock Coffee*\n\n` +
      `üè™ **–ù–∞—à –∞–¥—Ä–µ—Å:**\n` +
      `—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 4\n` +
      `–≥. –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥\n\n` +
      `‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**\n` +
      `–ü–Ω-–í—Å: 9:00 - 21:00\n\n` +
      `‚òï **–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:**\n` +
      `‚Ä¢ –°–≤–µ–∂–∏–π –∫–æ—Ñ–µ –∏–∑ –ª—É—á—à–∏—Ö –∑–µ—Ä–µ–Ω\n` +
      `‚Ä¢ –°–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n` +
      `‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π WiFi\n` +
      `‚Ä¢ –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url: 'https://yandex.ru/maps?whatshere%5Bpoint%5D=20.475075692115222%2C54.72108365189035&whatshere%5Bzoom%5D=16.0&ll=20.475075692115215%2C54.721083651502035&z=16.0&si=gdvp5w39jyyx0q54jj7byzrd6r' }],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.editOrSendMessage(ctx, shopInfo, keyboard);
  }

  // Show social media links
  async showSocialMedia(ctx: BotContext): Promise<void> {
    const socialMessage = 
      `üì± *–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏*\n\n` +
      `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∞–∫—Ü–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏:`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üí¨ Telegram', url: 'https://t.me/rock_coffee_kld' }],
      [{ text: 'üì± –î—Ä—É–≥–∏–µ —Å–æ—Ü.—Å–µ—Ç–∏', url: 'https://www.instagram.com/rockcoffee.kld?utm_source=qr&igsh=NzV2Y3Z4cjNiM2ly' }],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.editOrSendMessage(ctx, socialMessage, keyboard);
  }

  // Show program information
  async showAboutProgram(ctx: BotContext): Promise<void> {
    const aboutMessage = 
      `‚ÑπÔ∏è *–û –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*\n\n` +
      `üíé **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n` +
      `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
      `‚Ä¢ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ –Ω–∞–ø–∏—Ç–∫–∏\n` +
      `‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –±–µ–∑ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n` +
      `‚ùì **–í–æ–ø—Ä–æ—Å—ã?**\n` +
      `–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –±–∞—Ä–∏—Å—Ç–∞!`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–∞—è', callback_data: 'client_main_menu' }]
    ];

    await this.editOrSendMessage(ctx, aboutMessage, keyboard);
  }

  // Cancel registration
  async cancelRegistration(ctx: BotContext): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    if (ctx.session) {
      delete ctx.session.registration;
      delete ctx.session.waitingFor;
    }

    const cancelMessage = 
      '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n' +
      '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start\n\n' +
      '–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ Rock Coffee! ‚òï';

    await this.bot.sendMessage(ctx.message.chat.id, cancelMessage, {
      reply_markup: { remove_keyboard: true }
    });
  }

  // Validation methods
  private validateFullName(name: string): boolean {
    if (!name || name.trim().length < 5) return false;
    const parts = name.trim().split(/\s+/);
    return parts.length >= 2 && /^[–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(name);
  }

  private validatePhone(phone: string): boolean {
    return /^\+7\d{10}$/.test(phone);
  }

  private validateBirthDate(date: string): boolean {
    if (!/^\d{2}\.\d{2}\.\d{4}$/.test(date)) return false;
    
    const [day, month, year] = date.split('.').map(Number);
    const birthDate = new Date(year, month - 1, day);
    const today = new Date();
    
    return birthDate < today && year > 1900;
  }

  // Normalize phone number to +7XXXXXXXXXX format
  private normalizePhone(phone: string): string {
    const digits = phone.replace(/\D/g, '');
    
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.substring(1);
    } else if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    } else if (digits.length === 10) {
      return '+7' + digits;
    }
    
    return '+' + digits;
  }

  // Get client status based on visit count
  private getClientStatus(visitCount: number): string {
    if (visitCount >= 50) return 'ü•á VIP –∫–ª–∏–µ–Ω—Ç';
    if (visitCount >= 11) return 'ü•à –î—Ä—É–≥ –∫–æ—Ñ–µ–π–Ω–∏';
    return 'ü•â –ù–æ–≤–∏—á–æ–∫';
  }

  // Helper method to edit or send message
  private async editOrSendMessage(
    ctx: BotContext, 
    text: string, 
    keyboard: TelegramBot.InlineKeyboardButton[][]
  ): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const messageOptions: TelegramBot.SendMessageOptions = {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    };

    // Always send a new message for client interactions to avoid edit conflicts
    await this.bot.sendMessage(ctx.message.chat.id, text, messageOptions);
  }
}