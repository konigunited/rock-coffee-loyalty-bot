import TelegramBot from 'node-telegram-bot-api';
import { ClientService } from '../services/client.service';
import { PointService } from '../services/point.service';
import { UserService } from '../services/user.service';
import { BotContext, getCurrentUser, checkBaristaAccess, ACCESS_DENIED_MESSAGES } from '../middleware/access.middleware';
import { BaristaClientView } from '../types/client.types';
import { StatsHandler } from './stats.handler';

export class BaristaHandler {
  private bot: TelegramBot;
  private clientService: ClientService;
  private pointService: PointService;
  private userService: UserService;
  private statsHandler: StatsHandler;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.clientService = new ClientService();
    this.pointService = new PointService();
    this.userService = new UserService();
    this.statsHandler = new StatsHandler(bot);
  }

  // Main menu for barista
  async showMainMenu(ctx: BotContext): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      await this.sendMessage(ctx, ACCESS_DENIED_MESSAGES.NOT_BARISTA);
      return;
    }

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', callback_data: 'search_client' }],
      [{ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' }],
      [{ text: 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'recent_operations' }],
      [{ text: '‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞', callback_data: 'help_barista' }]
    ];

    const user = getCurrentUser(ctx);
    const welcomeText = 
      `üè™ Rock Coffee - –ü–∞–Ω–µ–ª—å –±–∞—Ä–∏—Å—Ç–∞\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user?.full_name}!\n\n` +
      `üí° *–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
      `\`12345 +15\` –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 15 –±–∞–ª–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç—É —Å –∫–∞—Ä—Ç–æ–π 12345\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await this.editMessage(ctx, welcomeText, keyboard);
  }

  // Quick points input - allow direct message like "12345 +15" for adding points
  async handleQuickPointsInput(ctx: BotContext, text: string): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    // Parse input like "12345 +15" or "12345 15" or "+15 12345"
    const patterns = [
      /^(\d+)\s*\+(\d+)$/, // "12345 +15"
      /^(\d+)\s+(\d+)$/, // "12345 15"  
      /^\+(\d+)\s+(\d+)$/, // "+15 12345"
    ];

    let cardNumber: string | null = null;
    let points: number | null = null;

    for (const pattern of patterns) {
      const match = text.trim().match(pattern);
      if (match) {
        if (pattern === patterns[2]) { // "+15 12345" format
          points = parseInt(match[1]);
          cardNumber = match[2];
        } else { // "12345 +15" or "12345 15" format
          cardNumber = match[1];
          points = parseInt(match[2]);
        }
        break;
      }
    }

    if (!cardNumber || !points || points <= 0) {
      await this.sendMessage(ctx, 
        '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
        '‚Ä¢ `12345 +15` (–∫–∞—Ä—Ç–∞ + –±–∞–ª–ª—ã)\n' +
        '‚Ä¢ `12345 15` (–∫–∞—Ä—Ç–∞ –±–∞–ª–ª—ã)\n' +
        '‚Ä¢ `+15 12345` (–±–∞–ª–ª—ã –∫–∞—Ä—Ç–∞)'
      );
      return;
    }

    if (points > 1000) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–ª–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º: 1000');
      return;
    }

    const user = getCurrentUser(ctx);
    if (!user) {
      return;
    }

    try {
      // Find client by card number
      const clients = await this.clientService.searchForBarista(cardNumber);
      
      if (clients.length === 0) {
        await this.sendMessage(ctx, `‚ùå –ö–ª–∏–µ–Ω—Ç —Å –∫–∞—Ä—Ç–æ–π ${cardNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
      
      if (clients.length > 1) {
        await this.sendMessage(ctx, `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ä—Ç–æ–π ${cardNumber}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫.`);
        return;
      }

      const client = clients[0];

      // Execute direct points transaction
      await this.pointService.earnPoints({
        client_id: client.id,
        operator_id: user.id,
        amount: 0,
        points: points,
        comment: `–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ ${points} –±–∞–ª–ª–æ–≤`
      });

      // Get updated client data
      const updatedClient = await this.clientService.getForBarista(client.id);

      if (!updatedClient) {
        await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      const successText = 
        `‚úÖ *–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n\n` +
        `üë§ ${updatedClient.full_name}\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: ${updatedClient.card_number}\n` +
        `‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ: *+${points} –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${updatedClient.balance} –±–∞–ª–ª–æ–≤*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë§ –ö –∫–ª–∏–µ–Ω—Ç—É', callback_data: `client_card:${client.id}` },
          { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_client' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'barista_menu' }]
      ];

      await this.sendMessage(ctx, successText, keyboard);

    } catch (error) {
      console.error('Quick points input error:', error);
      await this.sendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: ${error}`);
    }
  }

  // Search client interface
  async searchClient(ctx: BotContext): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      await this.sendMessage(ctx, ACCESS_DENIED_MESSAGES.NOT_BARISTA);
      return;
    }

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data: 'barista_menu' }]
    ];

    const searchText = 
      'üîç *–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n' +
      '‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345)\n' +
      '‚Ä¢ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤)\n\n' +
      'üí° –°–æ–≤–µ—Ç: –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞';

    await this.editMessage(ctx, searchText, keyboard);

    // Set waiting state
    if (ctx.session) {
      ctx.session.waitingFor = 'client_search';
    }
  }

  // Handle search query
  async handleSearchQuery(ctx: BotContext, query: string): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    if (query.length < 3) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return;
    }

    try {
      const clients = await this.clientService.searchForBarista(query);

      if (clients.length === 0) {
        const keyboard: TelegramBot.InlineKeyboardButton[][] = [
          [{ text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' }],
          [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }]
        ];

        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', keyboard);
        return;
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = clients.map(client => [{
        text: `üí≥ ${client.card_number} - ${client.full_name} (${client.balance} –±.)`,
        callback_data: `select_client:${client.id}`
      }]);

      // Add navigation buttons
      keyboard.push([
        { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' },
        { text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }
      ]);

      const resultText = `üë• *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã* (${clients.length}):\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã:`;

      await this.sendMessage(ctx, resultText, keyboard);

    } catch (error) {
      console.error('Search error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }

    // Clear waiting state
    if (ctx.session) {
      ctx.session.waitingFor = undefined;
    }
  }

  // Show client card (limited data for barista)
  async showClientCard(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    try {
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const lastVisitText = client.last_visit 
        ? new Date(client.last_visit).toLocaleDateString('ru-RU', {
            day: '2-digit', 
            month: '2-digit', 
            hour: '2-digit', 
            minute: '2-digit'
          })
        : '–ù–∏–∫–æ–≥–¥–∞';

      const clientText = 
        `üë§ *${client.full_name}*\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: \`${client.card_number}\`\n` +
        `üí∞ –ë–∞–ª–ª—ã: *${client.balance}*\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${lastVisitText}\n` +
        `üî¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${client.visit_count}\n` +
        `üìù –ó–∞–º–µ—Ç–∫–∏: ${client.notes || '–ù–µ—Ç'}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '+1 –±–∞–ª–ª', callback_data: `quick_add_one:${clientId}` },
          { text: '‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data: `earn_points:${clientId}` },
          { text: '‚ûñ –°–ø–∏—Å–∞—Ç—å', callback_data: `spend_points:${clientId}` }
        ],
        [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', callback_data: `add_note:${clientId}` }],
        [
          { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_client' },
          { text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'barista_menu' }
        ]
      ];

      await this.editMessage(ctx, clientText, keyboard);

    } catch (error) {
      console.error('Client card error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  // Quick add one point
  async quickAddOne(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const user = getCurrentUser(ctx);
    if (!user) {
      return;
    }

    try {
      // Execute direct points transaction for 1 point
      await this.pointService.earnPoints({
        client_id: clientId,
        operator_id: user.id,
        amount: 0,
        points: 1,
        comment: `–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 1 –±–∞–ª–ª–∞`
      });

      // Get updated client data
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      const successText = 
        `‚úÖ *+1 –±–∞–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}\n` +
        `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '+1 –±–∞–ª–ª', callback_data: `quick_add_one:${clientId}` },
          { text: 'üë§ –ö –∫–ª–∏–µ–Ω—Ç—É', callback_data: `client_card:${clientId}` }
        ],
        [
          { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }
        ]
      ];

      await this.editMessage(ctx, successText, keyboard);

    } catch (error) {
      console.error('Quick add one point error:', error);
      await this.sendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–∞: ${error}`);
    }
  }

  // Start earning points process
  async startEarnPoints(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    try {
      const client = await this.clientService.getForBarista(clientId);
      if (!client) {
        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const earnText = 
        `‚ûï *–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: \`${client.card_number}\`\n` +
        `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n\n` +
        `üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '1', callback_data: `confirm_earn:${clientId}:1` },
          { text: '5', callback_data: `confirm_earn:${clientId}:5` },
          { text: '10', callback_data: `confirm_earn:${clientId}:10` },
          { text: '15', callback_data: `confirm_earn:${clientId}:15` }
        ],
        [
          { text: '20', callback_data: `confirm_earn:${clientId}:20` },
          { text: '25', callback_data: `confirm_earn:${clientId}:25` },
          { text: '50', callback_data: `confirm_earn:${clientId}:50` },
          { text: '100', callback_data: `confirm_earn:${clientId}:100` }
        ],
        [
          { text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: `custom_earn:${clientId}` },
          { text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }
        ]
      ];

      await this.editMessage(ctx, earnText, keyboard);

    } catch (error) {
      console.error('Start earn points error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤');
    }
  }

  // Process custom earn amount input
  async processCustomEarnAmount(ctx: BotContext, pointsStr: string): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const points = parseInt(pointsStr);
    
    if (isNaN(points) || points <= 0) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15)');
      return;
    }

    if (points > 1000) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–ª–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º: 1000');
      return;
    }

    const { clientId } = ctx.session?.operation || {};

    if (!clientId) {
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    const confirmText = 
      `‚≠ê *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ:*\n\n` +
      `‚≠ê –ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é: *${points} –±–∞–ª–ª–æ–≤*`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_earn:${clientId}:${points}` },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }
      ]
    ];

    await this.editMessage(ctx, confirmText, keyboard);

    // Clear waiting state
    if (ctx.session) {
      ctx.session.waitingFor = undefined;
    }
  }

  // Confirm earn points
  async confirmEarnPoints(ctx: BotContext, clientId: number, points: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const user = getCurrentUser(ctx);
    if (!user) {
      return;
    }

    try {
      // Execute direct points transaction
      await this.pointService.earnPoints({
        client_id: clientId,
        operator_id: user.id,
        amount: 0, // No purchase amount, just direct points
        points: points, // Direct points assignment
        comment: `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤`
      });

      // Get updated client data
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      const successText = 
        `‚úÖ *–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n` +
        `‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ: *${points} –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë§ –ö –∫–ª–∏–µ–Ω—Ç—É', callback_data: `client_card:${clientId}` },
          { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }]
      ];

      await this.editMessage(ctx, successText, keyboard);

    } catch (error) {
      console.error('Earn points error:', error);
      await this.sendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: ${error}`);
    }
  }

  // Start custom earn points process
  async startCustomEarn(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    try {
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const customText = 
        `‚úèÔ∏è *–°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: #${client.card_number}\n` +
        `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${client.balance} –±–∞–ª–ª–æ–≤*\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }]
      ];

      await this.editMessage(ctx, customText, keyboard);

      // Set waiting state for custom amount input
      if (!ctx.session) {
        ctx.session = {};
      }
      if (!ctx.session.operation) {
        ctx.session.operation = {};
      }

      ctx.session.waitingFor = 'custom_earn_amount';
      ctx.session.operation.clientId = clientId;

    } catch (error) {
      console.error('Start custom earn error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤');
    }
  }

  // Start spending points process
  async startSpendPoints(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    try {
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (client.balance <= 0) {
        await this.sendMessage(ctx, '‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è');
        return;
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }]
      ];

      const spendText = 
        `üí∏ *–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤*\n\n` +
        `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤: *${client.balance}*\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:\n` +
        `(–Ω–∞–ø—Ä–∏–º–µ—Ä: 50)\n\n` +
        `üí° –ë–∞–ª–ª—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é`;

      await this.editMessage(ctx, spendText, keyboard);

      // Set session state
      if (ctx.session) {
        ctx.session.waitingFor = 'spend_points';
        ctx.session.operation = { type: 'spend', clientId, maxPoints: client.balance };
      }

    } catch (error) {
      console.error('Start spend points error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  // Process spend points input
  async processSpendPoints(ctx: BotContext, pointsStr: string): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const points = parseInt(pointsStr);
    const { clientId, maxPoints } = ctx.session?.operation || {};

    if (!clientId) {
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    if (isNaN(points) || points <= 0) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50)');
      return;
    }

    if (points > maxPoints) {
      await this.sendMessage(ctx, `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${maxPoints}`);
      return;
    }

    const discountAmount = this.pointService.calculateDiscountAmount(points);

    const confirmText = 
      `üí∏ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n` +
      `‚≠ê –ö —Å–ø–∏—Å–∞–Ω–∏—é: *${points} –±–∞–ª–ª–æ–≤*\n` +
      `üí∞ –°–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤: ${points}`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_spend:${clientId}:${points}` },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }
      ]
    ];

    await this.editMessage(ctx, confirmText, keyboard);

    // Clear waiting state
    if (ctx.session) {
      ctx.session.waitingFor = undefined;
    }
  }

  // Confirm spend points
  async confirmSpendPoints(ctx: BotContext, clientId: number, points: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const user = getCurrentUser(ctx);
    if (!user) {
      return;
    }

    try {
      // Execute spend points transaction
      await this.pointService.spendPoints({
        client_id: clientId,
        operator_id: user.id,
        points: points,
        comment: `–°–ø–∏—Å–∞–Ω–∏–µ ${points} –±–∞–ª–ª–æ–≤`
      });

      // Get updated client data
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      const discountAmount = this.pointService.calculateDiscountAmount(points);

      const successText = 
        `‚úÖ *–ë–∞–ª–ª—ã —Å–ø–∏—Å–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!*\n\n` +
        `‚≠ê –°–ø–∏—Å–∞–Ω–æ: *${points} –±–∞–ª–ª–æ–≤*\n` +
        `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤: *${client.balance}*\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë§ –ö –∫–ª–∏–µ–Ω—Ç—É', callback_data: `client_card:${clientId}` },
          { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }]
      ];

      await this.editMessage(ctx, successText, keyboard);

    } catch (error) {
      console.error('Spend points error:', error);
      await this.sendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤: ${error}`);
    }
  }

  // Start adding note process
  async startAddNote(ctx: BotContext, clientId: number): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    try {
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: `client_card:${clientId}` }]
      ];

      const noteText = 
        `üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}\n` +
        `üí≥ –ö–∞—Ä—Ç–∞: ${client.card_number}\n\n` +
        `üìù –¢–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n${client.notes || '–ù–µ—Ç'}\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É:`;

      await this.editMessage(ctx, noteText, keyboard);

      // Set session state
      if (ctx.session) {
        ctx.session.waitingFor = 'add_note';
        ctx.session.operation = { type: 'note', clientId };
      }

    } catch (error) {
      console.error('Start add note error:', error);
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  // Process note input
  async processAddNote(ctx: BotContext, note: string): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const { clientId } = ctx.session?.operation || {};

    if (!clientId) {
      await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    if (note.length > 500) {
      await this.sendMessage(ctx, '‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    const user = getCurrentUser(ctx);
    if (!user) {
      return;
    }

    try {
      // Update client notes
      await this.clientService.updateNotes(clientId, note, user.id);

      // Get updated client data
      const client = await this.clientService.getForBarista(clientId);

      if (!client) {
        await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      const successText = 
        `‚úÖ *–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.full_name}\n` +
        `üìù –ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏: ${client.notes}`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë§ –ö –∫–ª–∏–µ–Ω—Ç—É', callback_data: `client_card:${clientId}` },
          { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_client' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }]
      ];

      await this.editMessage(ctx, successText, keyboard);

    } catch (error) {
      console.error('Add note error:', error);
      await this.sendMessage(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ${error}`);
    }

    // Clear waiting state
    if (ctx.session) {
      ctx.session.waitingFor = undefined;
    }
  }

  // Show statistics menu
  async showMyStats(ctx: BotContext): Promise<void> {
    await this.statsHandler.showStatsMenu(ctx);
  }

  // Show today's stats
  async showTodayStats(ctx: BotContext): Promise<void> {
    await this.statsHandler.showTodayStats(ctx);
  }

  // Show week stats
  async showWeekStats(ctx: BotContext): Promise<void> {
    await this.statsHandler.showWeekStats(ctx);
  }

  // Show month stats
  async showMonthStats(ctx: BotContext): Promise<void> {
    await this.statsHandler.showMonthStats(ctx);
  }

  // Show recent operations
  async showRecentOperations(ctx: BotContext): Promise<void> {
    await this.statsHandler.showRecentOperations(ctx);
  }

  // Show help for barista
  async showHelp(ctx: BotContext): Promise<void> {
    if (!await checkBaristaAccess(ctx)) {
      return;
    }

    const helpText = 
      '‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –±–∞—Ä–∏—Å—Ç–∞*\n\n' +
      '*–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:*\n' +
      '‚ö° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '   ‚Ä¢ `12345 +15` - –∫–∞—Ä—Ç–∞ + –±–∞–ª–ª—ã\n' +
      '   ‚Ä¢ `12345 15` - –∫–∞—Ä—Ç–∞ –±–∞–ª–ª—ã\n' +
      '   ‚Ä¢ `+15 12345` - –±–∞–ª–ª—ã –∫–∞—Ä—Ç–∞\n\n' +
      '*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n' +
      'üîç **–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞** - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –§–ò–û\n' +
      '   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n' +
      '   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏–º–µ–Ω–∏\n\n' +
      '+1 **–ë—ã—Å—Ç—Ä–∞—è –∫–Ω–æ–ø–∫–∞** - –¥–æ–±–∞–≤–∏—Ç—å 1 –±–∞–ª–ª –∫–ª–∏–µ–Ω—Ç—É\n' +
      '   ‚Ä¢ –í –∫–∞—Ä—Ç–æ—á–∫–µ –∫–ª–∏–µ–Ω—Ç–∞\n' +
      '   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ\n\n' +
      '‚ûï **–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤** - —Å–≤–æ–±–æ–¥–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ\n' +
      '   ‚Ä¢ 1, 5, 10, 15, 20, 25, 50, 100 –±–∞–ª–ª–æ–≤\n' +
      '   ‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n' +
      '‚ûñ **–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤** - —Å–≤–æ–±–æ–¥–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ\n' +
      '   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å\n' +
      '   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n\n' +
      'üìù **–ó–∞–º–µ—Ç–∫–∏** - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ\n' +
      '   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö\n' +
      '   ‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n' +
      '   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤\n\n' +
      'üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞\n' +
      '   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n' +
      '   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n' +
      '   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n' +
      '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:*\n' +
      '‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n' +
      '‚Ä¢ –§–ò–û\n' +
      '‚Ä¢ –ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤\n' +
      '‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤\n' +
      '‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç\n' +
      '‚Ä¢ –ó–∞–º–µ—Ç–∫–∏\n\n' +
      '*–ö–æ–º–∞–Ω–¥—ã:*\n' +
      '/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
      '/help - –æ–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞';

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', callback_data: 'search_client' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' }
      ],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'barista_menu' }]
    ];

    await this.editMessage(ctx, helpText, keyboard);
  }

  // Helper methods for messaging
  private async sendMessage(ctx: BotContext, text: string, keyboard?: TelegramBot.InlineKeyboardButton[][]): Promise<void> {
    if (!ctx.message?.chat?.id) {
      return;
    }

    const options: TelegramBot.SendMessageOptions = {
      parse_mode: 'Markdown',
      reply_markup: keyboard ? { inline_keyboard: keyboard } : undefined
    };

    await this.bot.sendMessage(ctx.message.chat.id, text, options);
  }

  private async editMessage(ctx: BotContext, text: string, keyboard?: TelegramBot.InlineKeyboardButton[][]): Promise<void> {
    if (!ctx.message?.chat?.id) {
      return;
    }

    try {
      await this.bot.editMessageText(text, {
        chat_id: ctx.message.chat.id,
        message_id: ctx.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard ? { inline_keyboard: keyboard } : undefined
      });
    } catch (error) {
      // If edit fails, send new message
      await this.sendMessage(ctx, text, keyboard);
    }
  }
}