import TelegramBot from 'node-telegram-bot-api';
import Database from '../config/database';
import { UserService } from '../services/user.service';
import { ClientService } from '../services/client.service';
import { PointService } from '../services/point.service';
import { BotContext } from '../middleware/access.middleware';
import { UserRole } from '../types/user.types';

export class AdminHandler {
  private bot: TelegramBot;
  private userService: UserService;
  private clientService: ClientService;
  private pointService: PointService;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.userService = new UserService();
    this.clientService = new ClientService();
    this.pointService = new PointService();
  }

  // Show admin main menu with system overview
  async showMainMenu(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const systemStats = await this.getSystemStatistics();
      
      const menuText = 
        `‚ö° *ROCK COFFEE - –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n\n` +
        `üìä **–û–ë–ó–û–† –°–ò–°–¢–ï–ú–´:**\n` +
        `üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: *${systemStats.totalClients}*\n` +
        `üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: *${systemStats.activeClients}*\n` +
        `üë®‚Äçüíº –£–ø—Ä–∞–≤–ª—è—é—â–∏—Ö: *${systemStats.managers}*\n` +
        `üë®‚Äçüç≥ –ë–∞—Ä–∏—Å—Ç: *${systemStats.baristas}*\n\n` +
        `üí∞ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–õ–õ–û–í:**\n` +
        `üìà –û–ø–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: *${systemStats.todayOperations}*\n` +
        `üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü–µ: *${systemStats.monthOperations}*\n` +
        `‚≠ê –ë–∞–ª–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: *${systemStats.pointsIssued}*\n` +
        `üí∏ –ë–∞–ª–ª–æ–≤ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: *${systemStats.pointsSpent}*\n\n` +
        `üîß **–°–ò–°–¢–ï–ú–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:**\n` +
        `üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${systemStats.dbStatus}\n` +
        `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: *${systemStats.activeSessions}*\n` +
        `ü§ñ –ë–æ—Ç —Å—Ç–∞—Ç—É—Å: *–ê–∫—Ç–∏–≤–µ–Ω* ‚úÖ\n\n` +
        `üè† *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏', callback_data: 'admin_manage_managers' },
          { text: 'üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }
        ],
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_system_settings' },
          { text: 'üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_monitoring' }
        ],
        [
          { text: 'üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'admin_backup_restore' },
          { text: 'üìù –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞', callback_data: 'admin_audit_log' }
        ],
        [
          { text: 'üì¢ –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'admin_broadcast' },
          { text: 'üéØ –ê–∫—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ', callback_data: 'admin_promotions' }
        ],
        [
          { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'admin_refresh_stats' }
        ]
      ];

      await this.editOrSendMessage(ctx, menuText, keyboard);

    } catch (error) {
      console.error('Admin main menu error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
    }
  }

  // Manager management functions
  async showManagerManagement(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const managers = await this.userService.getByRole('manager');
      const baristas = await this.userService.getByRole('barista');
      
      let managersText = '';
      if (managers.length > 0) {
        managersText = managers.map((manager, index) => 
          `${index + 1}. ${manager.full_name} (@${manager.username || 'N/A'})\n` +
          `   üì± ID: ${manager.telegram_id}\n` +
          `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${new Date(manager.created_at).toLocaleDateString('ru-RU')}\n`
        ).join('\n');
      } else {
        managersText = '_–£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
      }

      let baristasText = '';
      if (baristas.length > 0) {
        baristasText = baristas.map((barista, index) => 
          `${index + 1}. ${barista.full_name} (@${barista.username || 'N/A'})\n` +
          `   üì± ID: ${barista.telegram_id}\n`
        ).join('\n');
      } else {
        baristasText = '_–ë–∞—Ä–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
      }

      const menuText = 
        `üë®‚Äçüíº **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú**\n\n` +
        `üìã **–£–ü–†–ê–í–õ–Ø–Æ–©–ò–ï (${managers.length}):**\n${managersText}\n\n` +
        `‚òï **–ë–ê–†–ò–°–¢–ê (${baristas.length}):**\n${baristasText}\n\n` +
        `üîß *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ', callback_data: 'admin_add_manager' },
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–∏—Å—Ç–∞', callback_data: 'admin_add_barista' }
        ],
        [
          { text: 'üë®‚Äçüíº –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö', callback_data: 'admin_list_managers' },
          { text: '‚òï –°–ø–∏—Å–æ–∫ –±–∞—Ä–∏—Å—Ç', callback_data: 'admin_list_baristas' }
        ],
        [
          { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: 'admin_remove_staff' },
          { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'admin_edit_staff' }
        ],
        [
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, menuText, keyboard);

    } catch (error) {
      console.error('Manager management error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.');
    }
  }

  // System settings
  async showSystemSettings(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const settings = await this.getSystemSettings();
      
      const settingsText = 
        `‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´**\n\n` +
        `üí∞ **–°–ò–°–¢–ï–ú–ê –ë–ê–õ–õ–û–í:**\n` +
        `‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: –°–≤–æ–±–æ–¥–Ω–∞—è\n` +
        `‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤: –ü–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
        `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${settings.maxSpendPercent}% –æ—Ç —Å—É–º–º—ã\n` +
        `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: ${settings.welcomeBonus} –±–∞–ª–ª–æ–≤\n\n` +
        `üéÇ **–ü–†–û–ì–†–ê–ú–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò:**\n` +
        `‚Ä¢ –ë–æ–Ω—É—Å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${settings.birthdayBonus} –±–∞–ª–ª–æ–≤\n` +
        `‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –±–∞–ª–ª–æ–≤: ${settings.pointsExpiryDays} –¥–Ω–µ–π\n` +
        `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ: ${settings.balanceNotifications ? '‚úÖ' : '‚ùå'}\n\n` +
        `ü§ñ **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê:**\n` +
        `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.autoNotifications ? '‚úÖ' : '‚ùå'}\n` +
        `‚Ä¢ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${settings.collectStats ? '‚úÖ' : '‚ùå'}\n` +
        `‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${settings.debugMode ? '‚úÖ' : '‚ùå'}\n\n` +
        `üîß *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–ª–æ–≤', callback_data: 'admin_points_settings' },
          { text: 'üéÇ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'admin_loyalty_settings' }
        ],
        [
          { text: 'ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'admin_bot_settings' },
          { text: 'üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', callback_data: 'admin_analytics_settings' }
        ],
        [
          { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º', callback_data: 'admin_reset_settings' },
          { text: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫', callback_data: 'admin_export_settings' }
        ],
        [
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, settingsText, keyboard);

    } catch (error) {
      console.error('System settings error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã.');
    }
  }

  // System monitoring
  async showSystemMonitoring(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const monitoring = await this.getSystemMonitoring();
      
      const monitoringText = 
        `üîç **–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´**\n\n` +
        `üíæ **–ë–ê–ó–ê –î–ê–ù–ù–´–•:**\n` +
        `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${monitoring.dbStatus}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${monitoring.dbConnections}\n` +
        `‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: ${monitoring.dbSize} MB\n` +
        `‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${monitoring.dbResponseTime}ms\n\n` +
        `ü§ñ **–¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢:**\n` +
        `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${monitoring.botStatus}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${monitoring.activeSessions}\n` +
        `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${monitoring.messagesToday}\n` +
        `‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: ${monitoring.errorsLastHour}\n\n` +
        `üñ•Ô∏è **–°–ï–†–í–ï–†:**\n` +
        `‚Ä¢ CPU: ${monitoring.cpuUsage}%\n` +
        `‚Ä¢ RAM: ${monitoring.ramUsage}%\n` +
        `‚Ä¢ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${monitoring.diskUsage}%\n` +
        `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${monitoring.uptime}\n\n` +
        `üìä **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:**\n` +
        `‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–º–∏–Ω: ${monitoring.transactionsPerMinute}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç API: ${monitoring.avgApiResponse}ms\n\n` +
        `üìà *–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ${monitoring.systemHealth}*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_refresh_monitoring' },
          { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_stats' }
        ],
        [
          { text: 'üö® –ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫', callback_data: 'admin_error_log' },
          { text: '‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', callback_data: 'admin_health_check' }
        ],
        [
          { text: 'üìà –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏', callback_data: 'admin_load_charts' },
          { text: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_diagnostics' }
        ],
        [
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, monitoringText, keyboard);

    } catch (error) {
      console.error('System monitoring error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
  }

  // Backup and restore
  async showBackupRestore(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const backupInfo = await this.getBackupInfo();
      
      const backupText = 
        `üíæ **–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï**\n\n` +
        `üìÖ **–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–ï–†–í–ù–´–ï –ö–û–ü–ò–ò:**\n` +
        backupInfo.recentBackups.map((backup, index) => 
          `${index + 1}. ${backup.name}\n` +
          `   üìÖ ${new Date(backup.date).toLocaleString('ru-RU')}\n` +
          `   üìä –†–∞–∑–º–µ—Ä: ${backup.size} MB\n` +
          `   ‚úÖ –°—Ç–∞—Ç—É—Å: ${backup.status}\n`
        ).join('\n') + '\n' +
        `üîÑ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï:**\n` +
        `‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${backupInfo.autoBackupSchedule}\n` +
        `‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –∫–æ–ø–∏—è: ${backupInfo.nextAutoBackup}\n` +
        `‚Ä¢ –•—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏–π: ${backupInfo.keepBackups} —à—Ç.\n\n` +
        `üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:**\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∫–æ–ø–∏–π: ${backupInfo.totalBackups}\n` +
        `‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${backupInfo.totalSize} GB\n` +
        `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ${backupInfo.lastRestore || '–ù–∏–∫–æ–≥–¥–∞'}\n\n` +
        `üíæ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é', callback_data: 'admin_create_backup' },
          { text: 'üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏', callback_data: 'admin_restore_backup' }
        ],
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ø–∏–π', callback_data: 'admin_list_backups' },
          { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏', callback_data: 'admin_cleanup_backups' }
        ],
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'admin_backup_settings' },
          { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å', callback_data: 'admin_verify_backups' }
        ],
        [
          { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'admin_export_data' },
          { text: 'üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'admin_import_data' }
        ],
        [
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, backupText, keyboard);

    } catch (error) {
      console.error('Backup restore error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }

  // Audit log
  async showAuditLog(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const auditData = await this.getAuditLogData();
      
      const auditText = 
        `üìù **–ñ–£–†–ù–ê–õ –ê–£–î–ò–¢–ê –°–ò–°–¢–ï–ú–´**\n\n` +
        `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø:**\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${auditData.todayTotal}\n` +
        `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏: ${auditData.pointOperations}\n` +
        `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤: ${auditData.clientRegistrations}\n` +
        `‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${auditData.adminActions}\n\n` +
        `üîç **–ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò:**\n` +
        auditData.recentOperations.map((op, index) => 
          `${index + 1}. [${new Date(op.timestamp).toLocaleTimeString('ru-RU')}] ${op.user}\n` +
          `   üéØ ${op.action}\n` +
          `   üìã ${op.details}\n`
        ).join('\n') + '\n' +
        `‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø:**\n` +
        `‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: ${auditData.failedLogins}\n` +
        `‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${auditData.suspiciousOperations}\n` +
        `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫: ${auditData.systemErrors}\n\n` +
        `üìà *–§–∏–ª—å—Ç—Ä—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üìã –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'admin_audit_all' },
          { text: 'üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–ª–∞–º–∏', callback_data: 'admin_audit_points' }
        ],
        [
          { text: 'üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', callback_data: 'admin_audit_staff' },
          { text: 'üë• –î–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data: 'admin_audit_clients' }
        ],
        [
          { text: '‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', callback_data: 'admin_audit_critical' },
          { text: 'üö® –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏', callback_data: 'admin_audit_errors' }
        ],
        [
          { text: 'üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ', callback_data: 'admin_audit_date_filter' },
          { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', callback_data: 'admin_audit_export' }
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_audit_refresh' },
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, auditText, keyboard);

    } catch (error) {
      console.error('Audit log error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞.');
    }
  }

  // Global broadcast system
  async showBroadcastSystem(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const broadcastStats = await this.getBroadcastStats();
      
      const broadcastText = 
        `üì¢ **–°–ò–°–¢–ï–ú–ê –ú–ê–°–°–û–í–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**\n\n` +
        `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–û–ö:**\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${broadcastStats.totalClients}\n` +
        `‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: ${broadcastStats.subscribedClients}\n` +
        `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: ${broadcastStats.monthlyMessages}\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${broadcastStats.deliveryRate}%\n\n` +
        `üìã **–ü–û–°–õ–ï–î–ù–ò–ï –†–ê–°–°–´–õ–ö–ò:**\n` +
        broadcastStats.recentBroadcasts.map((broadcast, index) => 
          `${index + 1}. ${broadcast.title}\n` +
          `   üìÖ ${new Date(broadcast.date).toLocaleDateString('ru-RU')}\n` +
          `   üìä –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${broadcast.delivered}/${broadcast.total}\n` +
          `   ‚úÖ –°—Ç–∞—Ç—É—Å: ${broadcast.status}\n`
        ).join('\n') + '\n' +
        `üéØ **–°–ï–ì–ú–ï–ù–¢–´ –ö–õ–ò–ï–ù–¢–û–í:**\n` +
        `‚Ä¢ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã: ${broadcastStats.allClients} —á–µ–ª.\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${broadcastStats.activeClients} —á–µ–ª.\n` +
        `‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç—ã: ${broadcastStats.vipClients} —á–µ–ª.\n` +
        `‚Ä¢ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏: ${broadcastStats.birthdayClients} —á–µ–ª.\n\n` +
        `üì¢ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:*`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'admin_create_broadcast' },
          { text: 'üéØ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É', callback_data: 'admin_segment_broadcast' }
        ],
        [
          { text: 'üéâ –ê–∫—Ü–∏—è/–ø—Ä–æ–º–æ', callback_data: 'admin_promo_broadcast' },
          { text: 'üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data: 'admin_birthday_broadcast' }
        ],
        [
          { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', callback_data: 'admin_broadcast_history' },
          { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫', callback_data: 'admin_broadcast_analytics' }
        ],
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫', callback_data: 'admin_broadcast_settings' },
          { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏', callback_data: 'admin_subscription_management' }
        ],
        [
          { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main_menu' }
        ]
      ];

      await this.editOrSendMessage(ctx, broadcastText, keyboard);

    } catch (error) {
      console.error('Broadcast system error:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫.');
    }
  }

  // Get system statistics
  private async getSystemStatistics(): Promise<any> {
    try {
      const stats = await Database.queryOne(`
        SELECT 
          (SELECT COUNT(*) FROM clients) as total_clients,
          (SELECT COUNT(*) FROM clients WHERE is_active = true) as active_clients,
          (SELECT COUNT(*) FROM users WHERE role = 'manager') as managers,
          (SELECT COUNT(*) FROM users WHERE role = 'barista') as baristas,
          (SELECT COUNT(*) FROM point_transactions 
           WHERE operation_type = 'earn' AND DATE(created_at) = CURRENT_DATE) as today_operations,
          (SELECT COUNT(*) FROM point_transactions 
           WHERE operation_type IN ('earn', 'spend') AND EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM CURRENT_DATE)) as month_operations,
          (SELECT COALESCE(SUM(points), 0) FROM point_transactions WHERE operation_type = 'earn') as points_issued,
          (SELECT COALESCE(ABS(SUM(points)), 0) FROM point_transactions WHERE operation_type = 'spend') as points_spent
      `);

      return {
        totalClients: stats.total_clients || 0,
        activeClients: stats.active_clients || 0,
        managers: stats.managers || 0,
        baristas: stats.baristas || 0,
        todayOperations: stats.today_operations || 0,
        monthOperations: stats.month_operations || 0,
        pointsIssued: stats.points_issued || 0,
        pointsSpent: stats.points_spent || 0,
        dbStatus: '‚úÖ –û–Ω–ª–∞–π–Ω',
        activeSessions: 12, // This would come from session store
        systemHealth: '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ'
      };
    } catch (error) {
      console.error('Error getting system statistics:', error);
      return {
        totalClients: 0, activeClients: 0, managers: 0, baristas: 0,
        todayOperations: 0, monthOperations: 0, pointsIssued: 0, pointsSpent: 0,
        dbStatus: '‚ùå –û—à–∏–±–∫–∞', activeSessions: 0, systemHealth: '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'
      };
    }
  }

  // Get system settings
  private async getSystemSettings(): Promise<any> {
    return {
      pointsPerRuble: 10,
      rublePerPoint: 1,
      maxSpendPercent: 50,
      welcomeBonus: 100,
      birthdayBonus: 200,
      pointsExpiryDays: 365,
      balanceNotifications: true,
      autoNotifications: true,
      collectStats: true,
      debugMode: false
    };
  }

  // Get system monitoring data
  private async getSystemMonitoring(): Promise<any> {
    return {
      dbStatus: '‚úÖ –û–Ω–ª–∞–π–Ω',
      dbConnections: 5,
      dbSize: 157,
      dbResponseTime: 45,
      botStatus: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
      activeSessions: 12,
      messagesToday: 234,
      errorsLastHour: 0,
      cpuUsage: 23,
      ramUsage: 67,
      diskUsage: 34,
      uptime: '5 –¥–Ω–µ–π 12 —á–∞—Å–æ–≤',
      transactionsPerMinute: 15,
      avgApiResponse: 120,
      systemHealth: '‚úÖ –æ—Ç–ª–∏—á–Ω–æ'
    };
  }

  // Get backup information
  private async getBackupInfo(): Promise<any> {
    return {
      recentBackups: [
        { name: 'backup_2024_01_15.sql', date: new Date(), size: 45, status: '–£—Å–ø–µ—à–Ω–æ' },
        { name: 'backup_2024_01_14.sql', date: new Date(Date.now() - 86400000), size: 43, status: '–£—Å–ø–µ—à–Ω–æ' },
        { name: 'backup_2024_01_13.sql', date: new Date(Date.now() - 172800000), size: 41, status: '–£—Å–ø–µ—à–Ω–æ' }
      ],
      autoBackupSchedule: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00',
      nextAutoBackup: '–ó–∞–≤—Ç—Ä–∞ –≤ 03:00',
      keepBackups: 30,
      totalBackups: 45,
      totalSize: 1.8,
      lastRestore: null
    };
  }

  // Get audit log data
  private async getAuditLogData(): Promise<any> {
    try {
      const auditStats = await Database.queryOne(`
        SELECT 
          COUNT(*) as today_total,
          COUNT(*) FILTER (WHERE action LIKE '%point%') as point_operations,
          COUNT(*) FILTER (WHERE action = 'create_client') as client_registrations,
          COUNT(*) FILTER (WHERE action LIKE 'admin_%') as admin_actions
        FROM activity_log 
        WHERE DATE(created_at) = CURRENT_DATE
      `);

      const recentOps = await Database.query(`
        SELECT 
          u.full_name as user,
          al.action,
          al.details,
          al.created_at as timestamp
        FROM activity_log al
        JOIN users u ON u.id = al.user_id
        ORDER BY al.created_at DESC
        LIMIT 5
      `);

      return {
        todayTotal: auditStats.today_total || 0,
        pointOperations: auditStats.point_operations || 0,
        clientRegistrations: auditStats.client_registrations || 0,
        adminActions: auditStats.admin_actions || 0,
        recentOperations: recentOps.map(op => ({
          user: op.user,
          action: op.action,
          details: op.details,
          timestamp: op.timestamp
        })),
        failedLogins: 0,
        suspiciousOperations: 0,
        systemErrors: 1
      };
    } catch (error) {
      console.error('Error getting audit data:', error);
      return {
        todayTotal: 0, pointOperations: 0, clientRegistrations: 0,
        adminActions: 0, recentOperations: [], failedLogins: 0,
        suspiciousOperations: 0, systemErrors: 0
      };
    }
  }

  // Get broadcast statistics
  private async getBroadcastStats(): Promise<any> {
    try {
      const stats = await Database.queryOne(`
        SELECT 
          COUNT(*) as total_clients,
          COUNT(*) FILTER (WHERE telegram_id IS NOT NULL) as subscribed_clients
        FROM clients 
        WHERE is_active = true
      `);

      return {
        totalClients: stats.total_clients || 0,
        subscribedClients: stats.subscribed_clients || 0,
        monthlyMessages: 45,
        deliveryRate: 98.5,
        recentBroadcasts: [
          { title: '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏', date: new Date(), delivered: 234, total: 250, status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' },
          { title: '–ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é', date: new Date(Date.now() - 172800000), delivered: 198, total: 200, status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' }
        ],
        allClients: stats.total_clients || 0,
        activeClients: Math.floor((stats.total_clients || 0) * 0.7),
        vipClients: Math.floor((stats.total_clients || 0) * 0.1),
        birthdayClients: Math.floor((stats.total_clients || 0) * 0.05)
      };
    } catch (error) {
      console.error('Error getting broadcast stats:', error);
      return {
        totalClients: 0, subscribedClients: 0, monthlyMessages: 0,
        deliveryRate: 0, recentBroadcasts: [], allClients: 0,
        activeClients: 0, vipClients: 0, birthdayClients: 0
      };
    }
  }

  // Helper method to edit or send message
  private async editOrSendMessage(
    ctx: BotContext, 
    text: string, 
    keyboard: TelegramBot.InlineKeyboardButton[][]
  ): Promise<void> {
    if (!ctx.message?.chat?.id) return;

    const messageOptions: TelegramBot.SendMessageOptions = {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    };

    if (ctx.message.message_id) {
      try {
        await this.bot.editMessageText(text, {
          chat_id: ctx.message.chat.id,
          message_id: ctx.message.message_id,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      } catch (editError) {
        await this.bot.sendMessage(ctx.message.chat.id, text, messageOptions);
      }
    } else {
      await this.bot.sendMessage(ctx.message.chat.id, text, messageOptions);
    }
  }

  // Add manager flow
  async startAddManager(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    const text = 
      `üë®‚Äçüíº *–î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
      `\`telegram_id username –ò–º—è –§–∞–º–∏–ª–∏—è\`\n\n` +
      `–ü—Ä–∏–º–µ—Ä:\n` +
      `\`123456789 john_manager –ò–≤–∞–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\`\n\n` +
      `–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_manage_managers' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id, text, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });

    // Set session state for text input
    if (ctx.session) {
      ctx.session.waitingFor = 'add_manager_data';
      ctx.session.lastActivity = new Date();
    }
  }

  // Add barista flow  
  async startAddBarista(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    const text = 
      `üë®‚Äçüç≥ *–î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–ê–†–ò–°–¢–ê*\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
      `\`telegram_id username –ò–º—è –§–∞–º–∏–ª–∏—è\`\n\n` +
      `–ü—Ä–∏–º–µ—Ä:\n` +
      `\`987654321 jane_barista –ú–∞—Ä–∏—è –ë–∞—Ä–∏—Å—Ç–∞\`\n\n` +
      `–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_manage_managers' }]
    ];

    await this.bot.sendMessage(ctx.message.chat.id, text, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });

    if (ctx.session) {
      ctx.session.waitingFor = 'add_barista_data';
      ctx.session.lastActivity = new Date();
    }
  }

  // Show all managers
  async showAllManagers(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const managers = await this.userService.getUsersByRole('manager');
      
      let text = `üë®‚Äçüíº *–°–ü–ò–°–û–ö –ú–ï–ù–ï–î–ñ–ï–†–û–í*\n\n`;
      
      if (managers.length === 0) {
        text += `–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n`;
      } else {
        managers.forEach((manager, index) => {
          const statusIcon = manager.is_active ? 'üü¢' : 'üî¥';
          text += `${index + 1}. ${statusIcon} *${manager.full_name}*\n`;
          text += `   @${manager.username || '–±–µ–∑ username'}\n`;
          text += `   ID: \`${manager.telegram_id}\`\n\n`;
        });
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: 'admin_add_manager' },
          { text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: 'admin_remove_staff' }
        ],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_manage_managers' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, text, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('Error showing managers:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
    }
  }

  // Show all baristas
  async showAllBaristas(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const baristas = await this.userService.getUsersByRole('barista');
      
      let text = `üë®‚Äçüç≥ *–°–ü–ò–°–û–ö –ë–ê–†–ò–°–¢*\n\n`;
      
      if (baristas.length === 0) {
        text += `–ë–∞—Ä–∏—Å—Ç –ø–æ–∫–∞ –Ω–µ—Ç.\n\n`;
      } else {
        baristas.forEach((barista, index) => {
          const statusIcon = barista.is_active ? 'üü¢' : 'üî¥';
          text += `${index + 1}. ${statusIcon} *${barista.full_name}*\n`;
          text += `   @${barista.username || '–±–µ–∑ username'}\n`;
          text += `   ID: \`${barista.telegram_id}\`\n\n`;
        });
      }

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–∏—Å—Ç–∞', callback_data: 'admin_add_barista' },
          { text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: 'admin_remove_staff' }
        ],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_manage_managers' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, text, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('Error showing baristas:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞—Ä–∏—Å—Ç');
    }
  }

  // Show staff removal interface
  async showRemoveStaff(ctx: BotContext): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const [managers, baristas] = await Promise.all([
        this.userService.getUsersByRole('manager'),
        this.userService.getUsersByRole('barista')
      ]);

      let text = `‚ùå *–£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í*\n\n`;
      text += `‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [];

      if (managers.length > 0) {
        text += `üë®‚Äçüíº **–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:**\n`;
        managers.forEach((manager, index) => {
          text += `${index + 1}. ${manager.full_name}\n`;
          keyboard.push([
            { 
              text: `‚ùå ${manager.full_name}`, 
              callback_data: `admin_remove_user:${manager.telegram_id}` 
            }
          ]);
        });
        text += `\n`;
      }

      if (baristas.length > 0) {
        text += `üë®‚Äçüç≥ **–ë–∞—Ä–∏—Å—Ç:**\n`;
        baristas.forEach((barista, index) => {
          text += `${index + 1}. ${barista.full_name}\n`;
          keyboard.push([
            { 
              text: `‚ùå ${barista.full_name}`, 
              callback_data: `admin_remove_user:${barista.telegram_id}` 
            }
          ]);
        });
      }

      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_manage_managers' }]);

      await this.bot.sendMessage(ctx.message.chat.id, text, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('Error showing remove staff:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    }
  }

  // Confirm user removal
  async confirmRemoveUser(ctx: BotContext, userId: number): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const user = await this.userService.getUserById(userId);
      if (!user) {
        await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // Remove user
      await this.userService.removeUser(userId);

      const roleText = user.role === 'manager' ? '–º–µ–Ω–µ–¥–∂–µ—Ä' : '–±–∞—Ä–∏—Å—Ça';
      const successText = 
        `‚úÖ *–°–û–¢–†–£–î–ù–ò–ö –£–î–ê–õ–ï–ù*\n\n` +
        `${roleText} *${user.full_name}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n` +
        `ID: \`${user.telegram_id}\``;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_managers' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, successText, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('Error removing user:', error);
      await this.bot.sendMessage(ctx.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
    }
  }

  // Process add manager data
  async processAddManagerData(ctx: BotContext, input: string): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const parts = input.trim().split(' ');
      if (parts.length < 4) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
      }

      const telegramId = parseInt(parts[0]);
      const username = parts[1];
      const fullName = parts.slice(2).join(' ');

      if (isNaN(telegramId)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID');
      }

      // Add manager
      await this.userService.addUser(telegramId, username, fullName, 'manager', true);

      const successText = 
        `‚úÖ *–ú–ï–ù–ï–î–ñ–ï–† –î–û–ë–ê–í–õ–ï–ù*\n\n` +
        `–ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É:\n\n` +
        `üë®‚Äçüíº *${fullName}*\n` +
        `@${username}\n` +
        `ID: \`${telegramId}\`\n\n` +
        `–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ–π /start`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_managers' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, successText, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      // Clear session
      if (ctx.session) {
        delete ctx.session.waitingFor;
      }

    } catch (error) {
      console.error('Error adding manager:', error);
      await this.bot.sendMessage(
        ctx.message.chat.id, 
        `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`telegram_id username –ò–º—è –§–∞–º–∏–ª–∏—è\``
      );
    }
  }

  // Process add barista data
  async processAddBaristaData(ctx: BotContext, input: string): Promise<void> {
    if (!ctx.from || !ctx.message?.chat?.id) return;

    try {
      const parts = input.trim().split(' ');
      if (parts.length < 4) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
      }

      const telegramId = parseInt(parts[0]);
      const username = parts[1];
      const fullName = parts.slice(2).join(' ');

      if (isNaN(telegramId)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID');
      }

      // Add barista
      await this.userService.addUser(telegramId, username, fullName, 'barista', true);

      const successText = 
        `‚úÖ *–ë–ê–†–ò–°–¢–ê –î–û–ë–ê–í–õ–ï–ù*\n\n` +
        `–ù–æ–≤—ã–π –±–∞—Ä–∏—Å—Ça —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É:\n\n` +
        `üë®‚Äçüç≥ *${fullName}*\n` +
        `@${username}\n` +
        `ID: \`${telegramId}\`\n\n` +
        `–ë–∞—Ä–∏—Å—Ça –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ–π /start`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_managers' }]
      ];

      await this.bot.sendMessage(ctx.message.chat.id, successText, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      // Clear session
      if (ctx.session) {
        delete ctx.session.waitingFor;
      }

    } catch (error) {
      console.error('Error adding barista:', error);
      await this.bot.sendMessage(
        ctx.message.chat.id, 
        `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`telegram_id username –ò–º—è –§–∞–º–∏–ª–∏—è\``
      );
    }
  }
}