import TelegramBot from 'node-telegram-bot-api';
import Database from '../config/database';
import { ClientService } from './client.service';

// Helper function to extract first name from full name
function getFirstName(fullName: string): string {
  if (!fullName || typeof fullName !== 'string') return '–¥—Ä—É–≥';
  
  // Split by spaces and return second part (first name) or first part if only one word
  const parts = fullName.trim().split(' ');
  if (parts.length >= 2) {
    return parts[1]; // Return first name (–ò–≤–∞–Ω from "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
  }
  return parts[0]; // Return single word if no spaces
}

export class ClientNotificationService {
  private bot: TelegramBot;
  private clientService: ClientService;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.clientService = new ClientService();
  }

  // Notify client about points earned
  async notifyPointsEarned(clientId: number, points: number, amount: number, newBalance: number): Promise<void> {
    try {
      const client = await this.clientService.getByTelegramId(0); // Will be updated with proper client lookup
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id) {
        console.log(`No Telegram ID for client ${clientId}, skipping notification`);
        return;
      }

      const message = 
        `‚úÖ *–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n\n` +
        `üí∞ –ó–∞ –ø–æ–∫—É–ø–∫—É: *${amount > 0 ? `${amount}‚ÇΩ` : '–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ'}*\n` +
        `‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ: *+${points} –±–∞–ª–ª–æ–≤*\n` +
        `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: *${newBalance} –±–∞–ª–ª–æ–≤*\n\n` +
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ Rock Coffee! ‚òï\n\n` +
        `üí° –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'client_main_menu' }]
      ];

      await this.bot.sendMessage(clientWithTelegram.telegram_id, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Error notifying points earned:', error);
    }
  }

  // Notify client about points spent
  async notifyPointsSpent(clientId: number, points: number, discountAmount: number, newBalance: number): Promise<void> {
    try {
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id) {
        console.log(`No Telegram ID for client ${clientId}, skipping notification`);
        return;
      }

      const message = 
        `üí∏ *–ë–∞–ª–ª—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã!*\n\n` +
        `‚≠ê –°–ø–∏—Å–∞–Ω–æ: *${points} –±–∞–ª–ª–æ–≤*\n` +
        `üíé –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤: *${newBalance}*\n\n` +
        `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ–ø–∏—Ç–∏—è! ‚òï\n\n` +
        `üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏!`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'client_main_menu' }]
      ];

      await this.bot.sendMessage(clientWithTelegram.telegram_id, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Error notifying points spent:', error);
    }
  }

  // Send birthday wishes and bonus
  async sendBirthdayWish(clientId: number, bonusPoints: number = 10): Promise<void> {
    try {
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id) {
        console.log(`No Telegram ID for client ${clientId}, skipping birthday notification`);
        return;
      }

      const firstName = getFirstName(clientWithTelegram.full_name);
      
      const message = 
        `üéâ *–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, ${firstName}!*\n\n` +
        `üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã Rock Coffee!\n\n` +
        `üéÅ **–í–∞—à –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫:**\n` +
        `‚≠ê ${bonusPoints} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n` +
        `üíé –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${clientWithTelegram.balance + bonusPoints} –±–∞–ª–ª–æ–≤*\n\n` +
        `ü•≥ –ñ–µ–ª–∞–µ–º –∑–¥–æ—Ä–æ–≤—å—è, —Å—á–∞—Å—Ç—å—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!\n` +
        `‚òï –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ—Ñ–µ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º–∏!\n\n` +
        `üéà –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ –æ—Å–æ–±–µ–Ω–Ω—ã–º, –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è!`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üéÇ –°–ø–∞—Å–∏–±–æ!', callback_data: 'client_main_menu' }],
        [{ text: 'üí≥ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É', callback_data: 'my_card' }]
      ];

      await this.bot.sendMessage(clientWithTelegram.telegram_id, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Error sending birthday wish:', error);
    }
  }

  // Send welcome message to new client
  async sendWelcomeMessage(clientId: number, cardNumber: string, welcomeBonus: number = 0): Promise<void> {
    try {
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id) {
        console.log(`No Telegram ID for client ${clientId}, skipping welcome message`);
        return;
      }

      const firstName = getFirstName(clientWithTelegram.full_name);
      
      let message = 
        `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee, ${firstName}!*\n\n` +
        `üëã –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n` +
        `üí≥ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:**\n` +
        `üÜî –ù–æ–º–µ—Ä: \`${cardNumber}\`\n`;

      if (welcomeBonus > 0) {
        message += 
          `üéÅ **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å:** ${welcomeBonus} –±–∞–ª–ª–æ–≤\n` +
          `üíé –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${welcomeBonus} –±–∞–ª–ª–æ–≤*\n\n`;
      } else {
        message += `üíé –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *0 –±–∞–ª–ª–æ–≤*\n\n`;
      }

      message += 
        `üìç **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:**\n` +
        `‚Ä¢ üõí –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤ –Ω–∞—à–µ–π –∫–æ—Ñ–µ–π–Ω–µ\n` +
        `‚Ä¢ ‚≠ê –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
        `‚Ä¢ üí∞ –¢—Ä–∞—Ç—å—Ç–µ –±–∞–ª–ª—ã –Ω–∞ —Å–∫–∏–¥–∫–∏\n` +
        `‚Ä¢ üéÇ –ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n` +
        `‚Ä¢ üéâ –£–∑–Ω–∞–≤–∞–π—Ç–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏\n\n` +
        `‚òï **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –≤–∫—É—Å–Ω—ã–º –∫–æ—Ñ–µ –∏ –∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã!**\n\n` +
        `‚ù§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—É—é —Å–µ–º—å—é!`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'my_card' }],
        [{ text: 'üìç –ù–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è', callback_data: 'coffee_shops' }],
        [{ text: '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'about_program' }]
      ];

      await this.bot.sendMessage(clientWithTelegram.telegram_id, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Error sending welcome message:', error);
    }
  }

  // Send promotional message to client
  async sendPromotionalMessage(clientId: number, title: string, message: string, imageUrl?: string): Promise<void> {
    try {
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id) {
        console.log(`No Telegram ID for client ${clientId}, skipping promotional message`);
        return;
      }

      const firstName = getFirstName(clientWithTelegram.full_name);
      
      const promotionMessage = 
        `üéØ *${title}*\n\n` +
        `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n` +
        `${message}\n\n` +
        `‚òï *Rock Coffee* - –≤–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' }],
        [{ text: 'üìç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', callback_data: 'coffee_shops' }]
      ];

      if (imageUrl) {
        await this.bot.sendPhoto(clientWithTelegram.telegram_id, imageUrl, {
          caption: promotionMessage,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      } else {
        await this.bot.sendMessage(clientWithTelegram.telegram_id, promotionMessage, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      }

    } catch (error) {
      console.error('Error sending promotional message:', error);
    }
  }

  // Send balance reminder to inactive clients
  async sendBalanceReminder(clientId: number): Promise<void> {
    try {
      const clientWithTelegram = await this.getClientWithTelegramId(clientId);
      
      if (!clientWithTelegram?.telegram_id || clientWithTelegram.balance <= 0) {
        return;
      }

      const firstName = getFirstName(clientWithTelegram.full_name);
      const daysSinceLastVisit = clientWithTelegram.last_visit 
        ? Math.floor((Date.now() - new Date(clientWithTelegram.last_visit).getTime()) / (1000 * 60 * 60 * 24))
        : null;

      const message = 
        `üòä *–ü—Ä–∏–≤–µ—Ç, ${firstName}!*\n\n` +
        `‚òï –ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º –≤ Rock Coffee!\n\n` +
        `üíé **–£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã:**\n` +
        `‚≠ê –ë–∞–ª–∞–Ω—Å: *${clientWithTelegram.balance} –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –≠—Ç–æ ${clientWithTelegram.balance} –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–∫–∏–¥–æ–∫!\n\n` +
        `${daysSinceLastVisit ? `üóì –í—ã –Ω–µ –±—ã–ª–∏ —É –Ω–∞—Å —É–∂–µ ${daysSinceLastVisit} –¥–Ω–µ–π.\n` : ''}` +
        `üéØ **–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã:**\n` +
        `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –Ω–æ–≤–∏–Ω–∫–∏\n` +
        `‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫\n` +
        `‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤\n\n` +
        `‚ù§Ô∏è –ñ–¥–µ–º –≤–∞—Å —Å –∞—Ä–æ–º–∞—Ç–Ω—ã–º –∫–æ—Ñ–µ –∏ —Ç–µ–ø–ª–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π!`;

      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: 'üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_card' }],
        [{ text: 'üìç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', callback_data: 'coffee_shops' }]
      ];

      await this.bot.sendMessage(clientWithTelegram.telegram_id, message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('Error sending balance reminder:', error);
    }
  }

  // Get client with telegram_id (helper method)
  private async getClientWithTelegramId(clientId: number): Promise<any> {
    const sql = `
      SELECT c.*, c.telegram_id
      FROM clients c
      WHERE c.id = $1 AND c.is_active = true AND c.telegram_id IS NOT NULL
    `;
    
    return await Database.queryOne(sql, [clientId]);
  }
}
