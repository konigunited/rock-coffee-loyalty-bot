import TelegramBot from 'node-telegram-bot-api';
import { ClientService } from './client.service';
import { UserService } from './user.service';
import Database from '../config/database';

export class NotificationService {
  private bot: TelegramBot;
  private clientService: ClientService;
  private userService: UserService;

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.clientService = new ClientService();
    this.userService = new UserService();
  }

  // Notify client about points earned
  async notifyPointsEarned(clientId: number, points: number, totalBalance: number): Promise<void> {
    try {
      const client = await this.clientService.getForBarista(clientId);
      
      if (!client || !client.telegram_id) {
        return; // Client not registered in Telegram
      }

      const message = 
        `üéâ *–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã!*\n\n` +
        `‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ: *${points} –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *${totalBalance} –±–∞–ª–ª–æ–≤*\n\n` +
        `‚òï –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ Rock Coffee!`;

      await this.bot.sendMessage(client.telegram_id, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error notifying points earned:', error);
    }
  }

  // Notify client about points spent
  async notifyPointsSpent(clientId: number, points: number, totalBalance: number, discountAmount: number): Promise<void> {
    try {
      const client = await this.clientService.getForBarista(clientId);
      
      if (!client || !client.telegram_id) {
        return; // Client not registered in Telegram
      }

      const message = 
        `üí∏ *–ë–∞–ª–ª—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!*\n\n` +
        `‚≠ê –°–ø–∏—Å–∞–Ω–æ: *${points} –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –≠–∫–æ–Ω–æ–º–∏—è: ${points} –±–∞–ª–ª–æ–≤\n` +
        `üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤: *${totalBalance}*\n\n` +
        `‚òï –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ Rock Coffee!`;

      await this.bot.sendMessage(client.telegram_id, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error notifying points spent:', error);
    }
  }

  // Notify client about birthday bonus
  async notifyBirthdayBonus(clientId: number, bonusPoints: number): Promise<void> {
    try {
      const client = await this.clientService.getForBarista(clientId);
      
      if (!client || !client.telegram_id) {
        return; // Client not registered in Telegram
      }

      const message = 
        `üéÇ *–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!*\n\n` +
        `üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã Rock Coffee!\n\n` +
        `‚≠ê –ü–æ–¥–∞—Ä–æ–∫: *${bonusPoints} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤*\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *${client.balance + bonusPoints} –±–∞–ª–ª–æ–≤*\n\n` +
        `‚òï –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å —Å –Ω–∞—à–∏–º –≤–∫—É—Å–Ω—ã–º –∫–æ—Ñ–µ!`;

      await this.bot.sendMessage(client.telegram_id, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error notifying birthday bonus:', error);
    }
  }

  // Send welcome message to new client
  async welcomeNewClient(clientId: number, cardNumber: string, welcomeBonus: number = 0): Promise<void> {
    try {
      const client = await this.clientService.getForBarista(clientId);
      
      if (!client || !client.telegram_id) {
        return; // Client not registered in Telegram
      }

      let message = 
        `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rock Coffee!*\n\n` +
        `üëã –ü—Ä–∏–≤–µ—Ç, ${client.full_name}!\n\n` +
        `üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: \`${cardNumber}\`\n`;

      if (welcomeBonus > 0) {
        message += 
          `üéÅ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: *${welcomeBonus} –±–∞–ª–ª–æ–≤*\n` +
          `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *${welcomeBonus} –±–∞–ª–ª–æ–≤*\n\n`;
      }

      message += 
        `üìç *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:*\n` +
        `‚Ä¢ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
        `‚Ä¢ –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–∫–∏–¥–∫–∏\n` +
        `‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
        `‚Ä¢ –ë–æ–Ω—É—Å—ã –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n\n` +
        `‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—É—é —Å–µ–º—å—é!`;

      await this.bot.sendMessage(client.telegram_id, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error sending welcome message:', error);
    }
  }

  // Send promotional message to all clients
  async sendPromotion(title: string, message: string, imageUrl?: string): Promise<number> {
    try {
      // Get all clients with telegram_id
      const sql = `
        SELECT telegram_id, full_name
        FROM clients
        WHERE telegram_id IS NOT NULL AND is_active = true
      `;
      
      const clients = await Database.query(sql);
      let sentCount = 0;

      const promotionMessage = 
        `üéØ *${title}*\n\n` +
        `${message}\n\n` +
        `‚òï Rock Coffee`;

      for (const client of clients) {
        try {
          if (imageUrl) {
            await this.bot.sendPhoto(client.telegram_id, imageUrl, {
              caption: promotionMessage,
              parse_mode: 'Markdown'
            });
          } else {
            await this.bot.sendMessage(client.telegram_id, promotionMessage, {
              parse_mode: 'Markdown'
            });
          }
          
          sentCount++;
          
          // Add small delay to avoid rate limiting
          await new Promise(resolve => setTimeout(resolve, 100));
          
        } catch (error) {
          console.error(`Error sending promotion to client ${client.telegram_id}:`, error);
        }
      }

      return sentCount;

    } catch (error) {
      console.error('Error sending promotion:', error);
      return 0;
    }
  }

  // Notify managers about low balance clients (who haven't visited recently)
  async notifyLowActivityClients(): Promise<void> {
    try {
      const sql = `
        SELECT id, card_number, full_name, last_visit, balance
        FROM clients
        WHERE is_active = true 
          AND last_visit < NOW() - INTERVAL '30 days'
          AND balance > 0
        ORDER BY last_visit ASC
        LIMIT 10
      `;
      
      const inactiveClients = await Database.query(sql);
      
      if (inactiveClients.length === 0) {
        return;
      }

      // Get managers to notify
      const managers = await this.userService.getByRole('manager');
      
      let notificationMessage = 'üìä *–ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é*\n\n';
      notificationMessage += '–ö–ª–∏–µ–Ω—Ç—ã —Å –±–∞–ª–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ –∫–æ—Ñ–µ–π–Ω—é:\n\n';
      
      for (const client of inactiveClients) {
        const daysSinceVisit = Math.floor(
          (Date.now() - new Date(client.last_visit).getTime()) / (1000 * 60 * 60 * 24)
        );
        
        notificationMessage += 
          `üë§ ${client.full_name}\n` +
          `üí≥ #${client.card_number}\n` +
          `üí∞ ${client.balance} –±–∞–ª–ª–æ–≤\n` +
          `üìÖ ${daysSinceVisit} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n\n`;
      }

      notificationMessage += 'üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.';

      for (const manager of managers) {
        if (manager.telegram_id) {
          await this.bot.sendMessage(manager.telegram_id, notificationMessage, {
            parse_mode: 'Markdown'
          });
        }
      }

    } catch (error) {
      console.error('Error notifying low activity clients:', error);
    }
  }

  // Send birthday reminders to managers
  async sendBirthdayReminders(): Promise<void> {
    try {
      const birthdayClients = await this.clientService.getBirthdayClients();
      
      if (birthdayClients.length === 0) {
        return;
      }

      // Get managers to notify
      const managers = await this.userService.getByRole('manager');
      
      let message = 'üéÇ *–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ*\n\n';
      
      for (const client of birthdayClients) {
        const birthDate = new Date(client.birth_date!);
        message += 
          `üë§ ${client.full_name}\n` +
          `üí≥ #${client.card_number}\n` +
          `üéÇ ${birthDate.getDate()}.${birthDate.getMonth() + 1}\n` +
          `üí∞ ${client.balance} –±–∞–ª–ª–æ–≤\n\n`;
      }

      message += 'üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –±–æ–Ω—É—Å—ã!';

      for (const manager of managers) {
        if (manager.telegram_id) {
          await this.bot.sendMessage(manager.telegram_id, message, {
            parse_mode: 'Markdown'
          });
        }
      }

    } catch (error) {
      console.error('Error sending birthday reminders:', error);
    }
  }

  // Send daily statistics to managers
  async sendDailyStats(): Promise<void> {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const sql = `
        SELECT 
          COUNT(*) as total_transactions,
          COUNT(DISTINCT client_id) as unique_clients,
          COUNT(DISTINCT operator_id) as active_baristas,
          SUM(CASE WHEN operation_type = 'earn' THEN points ELSE 0 END) as points_earned,
          SUM(CASE WHEN operation_type = 'spend' THEN ABS(points) ELSE 0 END) as points_spent,
          SUM(CASE WHEN operation_type = 'earn' THEN amount ELSE 0 END) as total_revenue
        FROM point_transactions
        WHERE created_at >= $1 AND created_at < $2
          AND operation_type IN ('earn', 'spend')
      `;

      const stats = await Database.queryOne(sql, [today, tomorrow]);
      
      const managers = await this.userService.getByRole('manager');

      const message = 
        `üìä *–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n` +
        `üìÖ ${today.toLocaleDateString('ru-RU')}\n\n` +
        `üë• –û–±—Å–ª—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: *${stats.unique_clients || 0}*\n` +
        `üëî –†–∞–±–æ—Ç–∞–ª–æ –±–∞—Ä–∏—Å—Ç–∞: *${stats.active_baristas || 0}*\n` +
        `üìù –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: *${stats.total_transactions || 0}*\n` +
        `‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: *${stats.points_earned || 0}*\n` +
        `üí∏ –°–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤: *${stats.points_spent || 0}*\n` +
        `üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: *${stats.total_points_earned || 0}*`;

      for (const manager of managers) {
        if (manager.telegram_id) {
          await this.bot.sendMessage(manager.telegram_id, message, {
            parse_mode: 'Markdown'
          });
        }
      }

    } catch (error) {
      console.error('Error sending daily stats:', error);
    }
  }
}