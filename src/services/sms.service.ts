/**
 * Telegram Message Service
 *
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 * –ó–∞–º–µ–Ω—è–µ—Ç SMS —Ä–∞—Å—Å—ã–ª–∫–∏ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */

import TelegramBot from 'node-telegram-bot-api';
import Database from '../config/database';

export interface MessageTemplate {
  type: 'birthday' | 'promo' | 'balance' | 'invite' | 'custom';
  message: string;
}

export interface MessageLogEntry {
  id?: number;
  client_id: number;
  telegram_id?: number;
  message: string;
  template_type?: string;
  status: 'pending' | 'sent' | 'failed';
  error_message?: string;
  sent_by: number;
  sent_at?: Date;
}

export class TelegramMessageService {
  private bot: TelegramBot;

  constructor(bot: TelegramBot) {
    this.bot = bot;
  }

  /**
   * Send Telegram message to client
   */
  async sendMessage(
    clientId: number,
    message: string,
    templateType?: string,
    sentBy: number = 1
  ): Promise<{ success: boolean; message?: string; error?: string }> {
    try {
      // Get client info
      const client = await Database.queryOne(
        'SELECT id, telegram_id, full_name FROM clients WHERE id = $1',
        [clientId]
      );

      if (!client) {
        throw new Error('Client not found');
      }

      if (!client.telegram_id) {
        throw new Error('Client has no Telegram ID - cannot send message');
      }

      // Validate message
      if (!message || message.length === 0) {
        throw new Error('Message cannot be empty');
      }

      if (message.length > 4000) {
        throw new Error('Message too long (max 4000 characters)');
      }

      let status: MessageLogEntry['status'] = 'sent';
      let errorMessage: string | undefined;

      try {
        // Send message via Telegram
        await this.bot.sendMessage(client.telegram_id, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –ú–æ—è –∫–∞—Ä—Ç–∞', callback_data: 'my_card' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'client_main_menu' }]
            ]
          }
        });

        console.log(`üì± Telegram message sent to client ${client.full_name} (${client.telegram_id})`);
      } catch (sendError) {
        status = 'failed';
        errorMessage = sendError instanceof Error ? sendError.message : 'Unknown error';
        console.error(`Failed to send Telegram message to ${client.telegram_id}:`, sendError);
      }

      // Log message attempt to database
      await this.logMessage({
        client_id: clientId,
        telegram_id: client.telegram_id,
        message,
        template_type: templateType,
        status,
        error_message: errorMessage,
        sent_by: sentBy
      });

      if (status === 'failed') {
        return {
          success: false,
          error: errorMessage || 'Failed to send message'
        };
      }

      return {
        success: true,
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram'
      };

    } catch (error) {
      console.error('Telegram message send error:', error);

      // Log failed attempt
      await this.logMessage({
        client_id: clientId,
        message,
        template_type: templateType,
        status: 'failed',
        error_message: error instanceof Error ? error.message : 'Unknown error',
        sent_by: sentBy
      });

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to send message'
      };
    }
  }

  /**
   * Get message template
   */
  getMessageTemplate(
    type: MessageTemplate['type'],
    clientName: string,
    cardNumber?: string,
    balance?: number
  ): string {
    const firstName = this.getFirstName(clientName);

    const templates: Record<MessageTemplate['type'], string> = {
      birthday: `üéÇ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, ${firstName}!*\n\nüéÅ –í –ø–æ–¥–∞—Ä–æ–∫ 100 –±–∞–ª–ª–æ–≤ –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É ${cardNumber}\n\n‚òï Rock Coffee –∂–¥–µ—Ç –≤–∞—Å —Å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –∫–æ—Ñ–µ!`,
      promo: `‚òï *–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*\n\nüéâ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏!\n\nüí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: \`${cardNumber}\`\nüí∞ –ë–∞–ª–∞–Ω—Å: *${balance} –±–∞–ª–ª–æ–≤*\n\n–†–æ–∫ –ö–æ—Ñ–µ`,
      balance: `üí∞ *–ë–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤*\n\n${firstName}, –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ \`${cardNumber}\`\n–¥–æ—Å—Ç—É–ø–Ω–æ: *${balance} –±–∞–ª–ª–æ–≤*\n\n‚òï –ñ–¥–µ–º –≤–∞—Å –≤ Rock Coffee!`,
      invite: `‚òï *–°–∫—É—á–∞–µ–º –ø–æ –≤–∞–º –≤ Rock Coffee!*\n\n${firstName}, –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ \`${cardNumber}\` –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –ø–æ–∫—É–ø–∫–∞–º.\n\nüéÅ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –ª—é–±–∏–º—ã–º –∫–æ—Ñ–µ - —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è –≤–∞—Å —Å—é—Ä–ø—Ä–∏–∑—ã!`,
      custom: ''
    };

    return templates[type] || '';
  }

  /**
   * Get first name from full name
   */
  private getFirstName(fullName: string): string {
    if (!fullName || typeof fullName !== 'string') return '–¥—Ä—É–≥';

    const parts = fullName.trim().split(' ');
    if (parts.length >= 2) {
      return parts[1]; // Return first name (–ò–≤–∞–Ω from "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
    }
    return parts[0]; // Return single word if no spaces
  }

  /**
   * Log message to database
   */
  private async logMessage(entry: MessageLogEntry): Promise<void> {
    try {
      const sql = `
        INSERT INTO telegram_messages_log (
          client_id, telegram_id, message, template_type, status, error_message, sent_by, sent_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
      `;

      await Database.query(sql, [
        entry.client_id,
        entry.telegram_id || null,
        entry.message,
        entry.template_type || null,
        entry.status,
        entry.error_message || null,
        entry.sent_by
      ]);

    } catch (error) {
      // Don't throw - just log to console
      // This prevents message logging errors from breaking the main flow
      console.error('Failed to log Telegram message to database:', error);
    }
  }

  /**
   * Get message sending history
   */
  async getMessageHistory(limit: number = 50): Promise<MessageLogEntry[]> {
    try {
      const sql = `
        SELECT
          id, client_id, telegram_id, message, template_type, status,
          error_message, sent_by, sent_at
        FROM telegram_messages_log
        ORDER BY sent_at DESC
        LIMIT $1
      `;

      return await Database.query(sql, [limit]);

    } catch (error) {
      console.error('Error getting message history:', error);
      return [];
    }
  }

  /**
   * Get message statistics
   */
  async getMessageStatistics(): Promise<{
    total: number;
    sent: number;
    failed: number;
    successRate: number;
  }> {
    try {
      const sql = `
        SELECT
          COUNT(*) as total,
          COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent,
          COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed
        FROM telegram_messages_log
      `;

      const stats = await Database.queryOne(sql);

      const total = parseInt(stats.total) || 0;
      const sent = parseInt(stats.sent) || 0;
      const successRate = total > 0 ? (sent / total) * 100 : 0;

      return {
        total,
        sent,
        failed: parseInt(stats.failed) || 0,
        successRate: Math.round(successRate * 100) / 100
      };

    } catch (error) {
      console.error('Error getting message statistics:', error);
      return {
        total: 0,
        sent: 0,
        failed: 0,
        successRate: 0
      };
    }
  }
}
