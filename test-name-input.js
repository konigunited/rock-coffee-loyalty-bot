#!/usr/bin/env node

console.log('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–ª–æ—É —Å –≤–≤–æ–¥–æ–º –∏–º–µ–Ω–∏');
console.log('='.repeat(60));

// –°–∏–º—É–ª—è—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let mockDatabase = {
  clients: [],
  nextCardNumber: 1
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ—Å–ª–æ–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏
function validateSingleWordName(name) {
  if (!name || name.trim().length === 0) return false;
  const trimmed = name.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
  if (trimmed.includes(' ')) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
  if (!/^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$/.test(trimmed)) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
  if (trimmed.length < 2 || trimmed.length > 20) return false;
  
  return true;
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function processContact(phone, telegramId, contactFirstName, contactLastName) {
  console.log(`\nüì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:`);
  console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
  console.log(`   –ò–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${contactFirstName} ${contactLastName || ''}`);
  
  const normalized = phone.startsWith('+7') ? phone : `+7${phone.slice(1)}`;
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
  const cardNumber = mockDatabase.nextCardNumber++;
  const tempName = contactFirstName || `–ö–ª–∏–µ–Ω—Ç ${cardNumber}`;
  
  const newClient = {
    id: mockDatabase.clients.length + 1,
    telegram_id: telegramId,
    card_number: cardNumber.toString(),
    full_name: tempName, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
    first_name: contactFirstName,
    phone: normalized,
    balance: 100,
    auth_method: 'phone_contact',
    profile_completed: false
  };
  
  mockDatabase.clients.push(newClient);
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º: "${tempName}"`);
  console.log(`üí≥ –ö–∞—Ä—Ç–∞: ${cardNumber}`);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: 100 –±–∞–ª–ª–æ–≤`);
  
  return {
    client_id: newClient.id,
    is_new_client: true,
    card_number: cardNumber.toString(),
    full_name: tempName,
    balance: 100
  };
}

// –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function processNameInput(clientId, inputName) {
  console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è: "${inputName}"`);
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
  if (!validateSingleWordName(inputName)) {
    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:');
    if (inputName.includes(' ')) {
      console.log('   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ)');
    }
    if (!/^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$/.test(inputName)) {
      console.log('   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
    }
    if (inputName.length < 2 || inputName.length > 20) {
      console.log('   ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-20 —Å–∏–º–≤–æ–ª–æ–≤)');
    }
    return false;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
  const client = mockDatabase.clients.find(c => c.id === clientId);
  if (client) {
    client.full_name = inputName.trim();
    client.first_name = inputName.trim();
    client.profile_completed = true;
    
    console.log(`‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "${inputName}"`);
    console.log(`üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    return true;
  }
  
  return false;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
console.log('\nüß™ –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω—ã–π —Ñ–ª–æ—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º');
console.log('-'.repeat(40));
const result1 = processContact('+79001234567', 123456789, '–î–º–∏—Ç—Ä–∏–π', null);
processNameInput(result1.client_id, '–ê–ª–µ–∫—Å–µ–π');

console.log('\nüß™ –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏');
console.log('-'.repeat(40));
const result2 = processContact('+79007654321', 987654321, 'User', null);
console.log('\n   –ü–æ–ø—ã—Ç–∫–∞ 1: –î–≤–∞ —Å–ª–æ–≤–∞');
processNameInput(result2.client_id, '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'); // –û—à–∏–±–∫–∞
console.log('\n   –ü–æ–ø—ã—Ç–∫–∞ 2: –° —Ü–∏—Ñ—Ä–∞–º–∏');
processNameInput(result2.client_id, '–ê–ª–µ–∫—Å–µ–π123'); // –û—à–∏–±–∫–∞
console.log('\n   –ü–æ–ø—ã—Ç–∫–∞ 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
processNameInput(result2.client_id, '–ú–∞—Ä–∏—è'); // –£—Å–ø–µ—Ö

console.log('\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏');
console.log('-'.repeat(40));
const result3 = processContact('+79165555555', 111111111, 'TestUser', null);
console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"');
const client = mockDatabase.clients.find(c => c.id === result3.client_id);
if (client) {
  console.log(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∏–º–µ–Ω–µ–º: "${client.full_name}"`);
}

console.log('\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:');
console.log('-'.repeat(40));
mockDatabase.clients.forEach((client, index) => {
  console.log(`${index + 1}. –ö–∞—Ä—Ç–∞: ${client.card_number}`);
  console.log(`   –ò–º—è: ${client.full_name}`);
  console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}`);
  console.log(`   –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω: ${client.profile_completed ? '–î–∞' : '–ù–µ—Ç'}`);
  console.log(`   –ë–∞–ª–∞–Ω—Å: ${client.balance} –±–∞–ª–ª–æ–≤`);
  console.log('');
});

console.log('\n' + '='.repeat(60));
console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–í–û–î–ê –ò–ú–ï–ù–ò:');
console.log('='.repeat(60));

console.log('\n‚úÖ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:');
console.log('   üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç');
console.log('   üë§ –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ—Å–ª–æ–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏');
console.log('   ‚úèÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏');
console.log('   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω');
console.log('   ‚è≠Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏');
console.log('   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ');

console.log('\nüîÑ –ù–û–í–´–ô –§–õ–û–£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:');
console.log('   1. üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º');
console.log('   2. üÜï –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º');  
console.log('   3. üë§ –ó–∞–ø—Ä–æ—Å: "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"');
console.log('   4. ‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ');
console.log('   5. ‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
console.log('   6. üè† –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');

console.log('\nüí° –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ú–ï–ù–ò:');
console.log('   ‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)');
console.log('   ‚úÖ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã (—Ä—É—Å—Å–∫–∏–µ/–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)');
console.log('   ‚úÖ –î–ª–∏–Ω–∞: 2-20 —Å–∏–º–≤–æ–ª–æ–≤');
console.log('   ‚ùå –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã');

console.log('\nüöÄ –ì–û–¢–û–í–û –ö –í–ù–ï–î–†–ï–ù–ò–Æ!');
console.log('\n' + '='.repeat(60));