#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ Rock Coffee Bot - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
const requiredFiles = [
  'src/handlers/client.handler.ts',
  'src/middleware/client.middleware.ts', 
  'src/services/client.service.ts',
  'migrations/002_phone_based_auth.sql',
  'scripts/migrate-to-phone-auth.ts'
];

console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  const exists = fs.existsSync(filePath);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
const packagePath = path.join(__dirname, 'package.json');
if (fs.existsSync(packagePath)) {
  const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  console.log(`   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${pkg.name}`);
  console.log(`   ‚úÖ –í–µ—Ä—Å–∏—è: ${pkg.version}`);
  console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${pkg.scripts['migrate-phone-auth'] ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
} else {
  console.log('   ‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  console.log('   ‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const hasToken = envContent.includes('BOT_TOKEN=');
  const hasDb = envContent.includes('DB_');
  console.log(`   ${hasToken ? '‚úÖ' : '‚ùå'} BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
  console.log(`   ${hasDb ? '‚úÖ' : '‚ùå'} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
} else {
  console.log('   ‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.example');
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ë–î
console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ mock-—Ç–µ—Å—Ç–∞:');

const mockTest = `
// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –ë–î
const mockPhone = '+79001234567';
const mockTelegramId = 123456789;
const mockContact = {
  phone_number: mockPhone,
  first_name: '–ò–≤–∞–Ω',
  last_name: '–ü–µ—Ç—Ä–æ–≤'
};

console.log('\\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
console.log('1. –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', mockContact);

// –ò–º–∏—Ç–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone) {
  const digits = phone.replace(/\\D/g, '');
  if (digits.startsWith('8') && digits.length === 11) {
    return '+7' + digits.substring(1);
  } else if (digits.startsWith('7') && digits.length === 11) {
    return '+' + digits;
  } else if (digits.length === 10) {
    return '+7' + digits;
  }
  return '+' + digits;
}

const normalized = normalizePhone(mockPhone);
console.log('2. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:', normalized);

// –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
function generateSequentialCard() {
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –ë–î, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä
  return '42'; // –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
}

const cardNumber = generateSequentialCard();
console.log('3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:', cardNumber);

// –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const mockClient = {
  id: 1,
  telegram_id: mockTelegramId,
  card_number: cardNumber,
  full_name: mockContact.last_name + ' ' + mockContact.first_name,
  first_name: mockContact.first_name,
  phone: normalized,
  balance: 100, // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
  auth_method: 'phone_contact',
  profile_completed: false,
  is_new_client: true
};

console.log('4. –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:', JSON.stringify(mockClient, null, 2));

console.log('\\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
console.log('\\nüì± –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL');
console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run migrate-phone-auth');
console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram –±–æ—Ç–æ–º');
`;

const mockTestPath = path.join(__dirname, 'test-mock.js');
fs.writeFileSync(mockTestPath, mockTest.trim());
console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${mockTestPath}`);

console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
if (allFilesExist) {
  console.log('   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  console.log('   üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!');
  
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker/PostgreSQL');
  console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate-phone-auth');
  console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram');
  
  console.log('\nüí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ mock-—Ç–µ—Å—Ç–∞:');
  console.log('   node test-mock.js');
  
} else {
  console.log('   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  console.log('   üõ†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
}

console.log('\n' + '='.repeat(50));