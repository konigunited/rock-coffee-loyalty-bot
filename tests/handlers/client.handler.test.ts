import { ClientHandler } from '../../src/handlers/client.handler';
import { MockTelegramBot, setupTestDatabase, cleanupTestDatabase, clearTestData } from '../helpers/database';
import { createTestUsers, createTestClients, createMockContext, TEST_USERS, TEST_CLIENTS } from '../fixtures/users';

describe('ClientHandler', () => {
  let clientHandler: ClientHandler;
  let mockBot: MockTelegramBot;

  beforeAll(async () => {
    await setupTestDatabase();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    await clearTestData();
    await createTestUsers();
    await createTestClients();
    
    mockBot = new MockTelegramBot();
    clientHandler = new ClientHandler();
  });

  afterEach(() => {
    mockBot.clearHistory();
  });

  describe('Registration', () => {
    it('should start registration process', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.startRegistration(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
    });

    it('should process name input', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' }, { text: '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á' });
      ctx.bot = mockBot;
      ctx.session = { registrationStep: 'name' };

      await clientHandler.processNameInput(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    });

    it('should process phone input', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' }, { text: '+79001234567' });
      ctx.bot = mockBot;
      ctx.session = { 
        registrationStep: 'phone',
        registrationData: { full_name: '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á' }
      };

      await clientHandler.processPhoneInput(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üéÇ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
    });

    it('should complete registration', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' }, { text: '1990-01-01' });
      ctx.bot = mockBot;
      ctx.session = { 
        registrationStep: 'birth_date',
        registrationData: { 
          full_name: '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
          phone: '+79001234567'
        }
      };

      await clientHandler.processBirthDateInput(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    });
  });

  describe('Profile Management', () => {
    it('should show client profile', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showProfile(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å');
    });

    it('should show balance', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showBalance(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å');
    });

    it('should show transaction history', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showTransactionHistory(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    });
  });

  describe('Profile Editing', () => {
    it('should show edit profile menu', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showEditProfileMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    });

    it('should edit phone number', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.editPhone(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    });

    it('should edit birth date', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.editBirthDate(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
    });

    it('should process phone update', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' }, { text: '+79009999999' });
      ctx.bot = mockBot;
      ctx.session = { editField: 'phone' };

      await clientHandler.processPhoneUpdate(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    });

    it('should process birth date update', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' }, { text: '1995-05-15' });
      ctx.bot = mockBot;
      ctx.session = { editField: 'birth_date' };

      await clientHandler.processBirthDateUpdate(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    });
  });

  describe('Card Management', () => {
    it('should show QR code', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showQRCode(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üî≥ QR-–∫–æ–¥ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã');
    });

    it('should show card info', async () => {
      const clientTelegramId = TEST_CLIENTS[0].telegram_id!;
      const ctx = createMockContext({ telegram_id: clientTelegramId, full_name: 'Test Client', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showCard(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞');
    });
  });

  describe('Error Handling', () => {
    it('should handle client not found', async () => {
      const ctx = createMockContext({ telegram_id: 999999999, full_name: 'Nonexistent User', role: 'client' });
      ctx.bot = mockBot;

      await clientHandler.showProfile(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    });

    it('should handle invalid phone format', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' }, { text: 'invalid phone' });
      ctx.bot = mockBot;
      ctx.session = { 
        registrationStep: 'phone',
        registrationData: { full_name: '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á' }
      };

      await clientHandler.processPhoneInput(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    });

    it('should handle invalid birth date format', async () => {
      const ctx = createMockContext({ telegram_id: 999888777, full_name: 'New User', role: 'client' }, { text: 'invalid date' });
      ctx.bot = mockBot;
      ctx.session = { 
        registrationStep: 'birth_date',
        registrationData: { 
          full_name: '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
          phone: '+79001234567'
        }
      };

      await clientHandler.processBirthDateInput(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    });
  });
});