import { AdminHandler } from '../../src/handlers/admin.handler';
import { MockTelegramBot, setupTestDatabase, cleanupTestDatabase, clearTestData } from '../helpers/database';
import { createTestUsers, createTestClients, createMockContext, TEST_USERS } from '../fixtures/users';

describe('AdminHandler', () => {
  let adminHandler: AdminHandler;
  let mockBot: MockTelegramBot;

  beforeAll(async () => {
    await setupTestDatabase();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    await clearTestData();
    await createTestUsers();
    await createTestClients();
    
    mockBot = new MockTelegramBot();
    adminHandler = new AdminHandler(mockBot as any);
  });

  afterEach(() => {
    mockBot.clearHistory();
  });

  describe('Menu Navigation', () => {
    it('should show main admin menu', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show system menu', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show logs menu', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemLogs(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });
  });

  describe('User Management', () => {
    it('should show all users', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showAllStaff(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    });

    it('should show user management menu', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showManagerManagement(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should add user prompt', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.addManager(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    });

    it('should search user prompt', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.searchManager(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    });
  });

  describe('Database Management', () => {
    it('should show database status', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemStatistics(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üóÉÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    });

    it('should backup database', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');
    });

    it('should run database cleanup', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    });
  });

  describe('Statistics and Analytics', () => {
    it('should show system statistics', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemStatistics(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    });

    it('should show activity logs', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemLogs(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìà –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    });

    it('should show error logs', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemLogs(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫');
    });
  });

  describe('System Configuration', () => {
    it('should show bot settings', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞');
    });

    it('should restart bot', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞');
    });

    it('should show maintenance mode toggle', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showSystemSettings(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
    });
  });

  describe('Client Management', () => {
    it('should show all clients', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showAllStaff(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã');
    });

    it('should search client', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.searchManager(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞');
    });

    it('should show client details', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await adminHandler.showManagerDetails(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë§ –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞');
    });
  });

  describe('Access Control', () => {
    it('should deny access to non-admin users', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await adminHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    });

    it('should allow access only to admin users', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await adminHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    });
  });
});