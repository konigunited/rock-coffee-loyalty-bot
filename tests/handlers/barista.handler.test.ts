import { BaristaHandler } from '../../src/handlers/barista.handler';
import { MockTelegramBot, setupTestDatabase, cleanupTestDatabase, clearTestData } from '../helpers/database';
import { createTestUsers, createTestClients, createMockContext, TEST_USERS } from '../fixtures/users';

describe('BaristaHandler', () => {
  let baristaHandler: BaristaHandler;
  let mockBot: MockTelegramBot;

  beforeAll(async () => {
    await setupTestDatabase();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    await clearTestData();
    await createTestUsers();
    await createTestClients();
    
    mockBot = new MockTelegramBot();
    baristaHandler = new BaristaHandler(mockBot as any);
  });

  afterEach(() => {
    mockBot.clearHistory();
  });

  describe('Menu Navigation', () => {
    it('should show main barista menu', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await baristaHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚òï –ú–µ–Ω—é –±–∞—Ä–∏—Å—Ç–∞');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show help information', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await baristaHandler.showHelp(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –±–∞—Ä–∏—Å—Ç–∞*');
      expect(lastMessage.text).toContain('–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
    });
  });

  describe('Client Search', () => {
    it('should initiate client search by card', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await baristaHandler.searchClient(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞');
    });

    it('should search by name', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await baristaHandler.searchClientByName(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞');
    });

    it('should find client by card number', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: 'TEST001' });
      ctx.bot = mockBot;

      await baristaHandler.handleCardSearch(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë§ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
    });

    it('should handle client not found by card', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: 'INVALID' });
      ctx.bot = mockBot;

      await baristaHandler.handleCardSearch(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    });

    it('should find client by name', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: '–ò–≤–∞–Ω–æ–≤' });
      ctx.bot = mockBot;

      await baristaHandler.handleNameSearch(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('–ù–∞–π–¥–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã');
    });
  });

  describe('Point Operations', () => {
    it('should show earn points menu', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.showTransactionOptions(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤');
    });

    it('should show spend points menu', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.showTransactionOptions(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí∏ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤');
    });

    it('should process earning points', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: '500' });
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.handlePointsTransaction(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí∞ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
    });

    it('should process spending points', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: '50' });
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.handlePointsTransaction(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üí∏ –ë–∞–ª–ª—ã —Å–ø–∏—Å–∞–Ω—ã');
    });

    it('should handle insufficient balance for spending', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser, { text: '1000' });
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.handlePointsTransaction(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤');
    });
  });

  describe('Client Profile', () => {
    it('should show client profile', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.showClientDetails(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞');
    });

    it('should show client transactions', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;
      ctx.session = { selectedClientId: 1 };

      await baristaHandler.showClientHistory(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    });
  });

  describe('Access Control', () => {
    it('should deny access to non-barista users', async () => {
      const clientUser = { ...TEST_USERS[0], role: 'client' as const };
      const ctx = createMockContext(clientUser);
      ctx.bot = mockBot;

      await baristaHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    });

    it('should allow access to manager and admin users', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await baristaHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚òï –ú–µ–Ω—é –±–∞—Ä–∏—Å—Ç–∞');
    });
  });
});