import { ManagerHandler } from '../../src/handlers/manager.handler';
import { MockTelegramBot, setupTestDatabase, cleanupTestDatabase, clearTestData } from '../helpers/database';
import { createTestUsers, createTestClients, createMockContext, TEST_USERS } from '../fixtures/users';

describe('ManagerHandler', () => {
  let managerHandler: ManagerHandler;
  let mockBot: MockTelegramBot;

  beforeAll(async () => {
    await setupTestDatabase();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    await clearTestData();
    await createTestUsers();
    await createTestClients();
    
    mockBot = new MockTelegramBot();
    managerHandler = new ManagerHandler(mockBot as any);
  });

  afterEach(() => {
    mockBot.clearHistory();
  });

  describe('Menu Navigation', () => {
    it('should show main manager menu', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üè¢ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show staff menu', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showStaffManagement(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show client analysis menu', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showClientAnalysis(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìä –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });

    it('should show statistics menu', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showStatistics(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
      expect(lastMessage.options?.reply_markup?.inline_keyboard).toBeDefined();
    });
  });

  describe('Client Analysis', () => {
    it('should show top clients', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showTopClients(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üèÜ –¢–û–ü-10 –∫–ª–∏–µ–Ω—Ç–æ–≤');
    });

    it('should show inactive clients', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showInactiveClients(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã');
    });

    it('should show baristas only', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showBaristasOnly(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚òï –°–ø–∏—Å–æ–∫ –±–∞—Ä–∏—Å—Ç–∞');
    });
  });

  describe('Statistics', () => {
    it('should show staff statistics', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showStaffStatistics(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞');
    });

    it('should show week manager stats', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showWeekManagerStats(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    });

    it('should show month manager stats', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showMonthManagerStats(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìÜ –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    });

    it('should show total stats', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showTotalStats(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    });
  });

  describe('Promotions and Broadcasting', () => {
    it('should show promotions', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showPromotions(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üéØ –ê–∫—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ');
    });

    it('should show broadcast menu', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showNotificationCenter(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üì¢ –†–∞—Å—Å—ã–ª–∫–∞');
    });

    it('should show broadcast client types', async () => {
      const managerUser = TEST_USERS.find(u => u.role === 'manager')!;
      const ctx = createMockContext(managerUser);
      ctx.bot = mockBot;

      await managerHandler.showNotificationCenter(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–æ–≤');
    });
  });

  describe('Access Control', () => {
    it('should deny access to non-manager users', async () => {
      const baristaUser = TEST_USERS.find(u => u.role === 'barista')!;
      const ctx = createMockContext(baristaUser);
      ctx.bot = mockBot;

      await managerHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    });

    it('should allow access to admin users', async () => {
      const adminUser = TEST_USERS.find(u => u.role === 'admin')!;
      const ctx = createMockContext(adminUser);
      ctx.bot = mockBot;

      await managerHandler.showMainMenu(ctx);

      const lastMessage = mockBot.getLastMessage();
      expect(lastMessage.text).toContain('üè¢ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    });
  });
});