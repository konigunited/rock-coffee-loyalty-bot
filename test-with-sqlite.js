#!/usr/bin/env node

const sqlite3 = require('sqlite3');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –ë–î');
console.log('='.repeat(50));

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é SQLite –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const dbPath = path.join(__dirname, 'test.db');
const db = new sqlite3.Database(dbPath);

console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –ë–î...');

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
db.serialize(() => {
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS clients (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      telegram_id INTEGER,
      card_number TEXT UNIQUE,
      full_name TEXT,
      first_name TEXT,
      phone TEXT UNIQUE,
      birth_date TEXT,
      balance INTEGER DEFAULT 0,
      auth_method TEXT DEFAULT 'phone_contact',
      profile_completed BOOLEAN DEFAULT false,
      is_active BOOLEAN DEFAULT true,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  const generateCardNumber = () => {
    return new Promise((resolve, reject) => {
      db.get("SELECT MAX(CAST(card_number AS INTEGER)) as max_num FROM clients WHERE card_number GLOB '[0-9]*'", (err, row) => {
        if (err) reject(err);
        const nextNumber = (row?.max_num || 0) + 1;
        resolve(nextNumber.toString());
      });
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  const findOrCreateByPhone = (phone, telegramId, firstName, lastName) => {
    return new Promise(async (resolve, reject) => {
      try {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        db.get("SELECT * FROM clients WHERE phone = ? AND is_active = 1", [phone], async (err, row) => {
          if (err) reject(err);
          
          if (row) {
            // –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (row.telegram_id !== telegramId) {
              db.run("UPDATE clients SET telegram_id = ? WHERE id = ?", [telegramId, row.id]);
            }
            resolve({
              client_id: row.id,
              is_new_client: false,
              card_number: row.card_number,
              full_name: row.full_name,
              balance: row.balance
            });
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            const cardNumber = await generateCardNumber();
            const fullName = lastName && firstName ? `${lastName} ${firstName}` : (firstName || `–ö–ª–∏–µ–Ω—Ç ${cardNumber}`);
            
            db.run(
              `INSERT INTO clients (telegram_id, card_number, full_name, first_name, phone, balance, auth_method, profile_completed) 
               VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
              [telegramId, cardNumber, fullName, firstName, phone, 100, 'phone_contact', lastName ? true : false],
              function(err) {
                if (err) reject(err);
                resolve({
                  client_id: this.lastID,
                  is_new_client: true,
                  card_number: cardNumber,
                  full_name: fullName,
                  balance: 100
                });
              }
            );
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');

  setTimeout(async () => {
    try {
      // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      console.log('\nüì± –¢–µ—Å—Ç 1: –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç');
      const result1 = await findOrCreateByPhone('+79001234567', 123456789, '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤');
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result1, null, 2));

      // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≥–æ –∂–µ –∫–ª–∏–µ–Ω—Ç–∞
      console.log('\nüîÑ –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      const result2 = await findOrCreateByPhone('+79001234567', 123456789, '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤');
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result2, null, 2));

      // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      console.log('\nüë§ –¢–µ—Å—Ç 3: –í—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç');
      const result3 = await findOrCreateByPhone('+79007654321', 987654321, '–ú–∞—Ä–∏—è', '–°–∏–¥–æ—Ä–æ–≤–∞');
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result3, null, 2));

      // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –∏–º–µ–Ω–µ–º
      console.log('\nüìù –¢–µ—Å—Ç 4: –ö–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å –∏–º–µ–Ω–µ–º');
      const result4 = await findOrCreateByPhone('+79005555555', 111111111, '–ê–ª–µ–∫—Å–µ–π', null);
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result4, null, 2));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
      console.log('\nüìä –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –≤ –ë–î:');
      db.all("SELECT * FROM clients", (err, rows) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞:', err);
        } else {
          rows.forEach((row, index) => {
            console.log(`   ${index + 1}. –ö–∞—Ä—Ç–∞: ${row.card_number}, ${row.full_name}, ${row.phone}, –ë–∞–ª–∞–Ω—Å: ${row.balance}`);
          });
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        db.close();
        require('fs').unlinkSync(dbPath);
        
        console.log('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüéØ –í—ã–≤–æ–¥—ã:');
        console.log('   ‚Ä¢ –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç —Ä–∞–±–æ—Ç–∞—é—Ç (1, 2, 3, 4)');
        console.log('   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
        console.log('   ‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è');
        console.log('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
        
        console.log('\n' + '='.repeat(50));
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      db.close();
    }
  }, 100);
});