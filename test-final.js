#!/usr/bin/env node

console.log('üéØ Rock Coffee Bot - –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
console.log('='.repeat(60));

// –°–∏–º—É–ª—è—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let mockDatabase = {
  clients: [
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    {
      id: 1,
      telegram_id: 111111111,
      card_number: '1', // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞–ª 1
      full_name: '–ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
      first_name: '–°–µ—Ä–≥–µ–π',
      phone: '+79161234567',
      balance: 250,
      auth_method: 'full_registration',
      profile_completed: true
    },
    {
      id: 2,
      telegram_id: 222222222,
      card_number: '2', // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞–ª 2
      full_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞', 
      first_name: '–ê–Ω–Ω–∞',
      phone: '+79169876543',
      balance: 150,
      auth_method: 'full_registration',
      profile_completed: true
    }
  ],
  nextCardNumber: 3
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockClientService {
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  normalizePhone(phone) {
    const digits = phone.replace(/\D/g, '');
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.substring(1);
    } else if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    } else if (digits.length === 10) {
      return '+7' + digits;
    }
    return '+' + digits;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  generateCardNumber() {
    return (mockDatabase.nextCardNumber++).toString();
  }

  // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
  getByTelegramId(telegramId) {
    return mockDatabase.clients.find(c => c.telegram_id === telegramId) || null;
  }

  // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  getByPhone(phone) {
    const normalized = this.normalizePhone(phone);
    return mockDatabase.clients.find(c => c.phone === normalized) || null;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
  findOrCreateByPhone(phone, telegramId, firstName, lastName) {
    const normalized = this.normalizePhone(phone);
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    let client = this.getByPhone(normalized);
    
    if (client) {
      // –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (client.telegram_id !== telegramId) {
        client.telegram_id = telegramId;
      }
      
      return {
        client_id: client.id,
        is_new_client: false,
        card_number: client.card_number,
        full_name: client.full_name,
        balance: client.balance
      };
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const cardNumber = this.generateCardNumber();
      const fullName = lastName && firstName 
        ? `${lastName} ${firstName}` 
        : (firstName || `–ö–ª–∏–µ–Ω—Ç ${cardNumber}`);
      
      const newClient = {
        id: mockDatabase.clients.length + 1,
        telegram_id: telegramId,
        card_number: cardNumber,
        full_name: fullName,
        first_name: firstName || '–ö–ª–∏–µ–Ω—Ç',
        phone: normalized,
        balance: 100, // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        auth_method: 'phone_contact',
        profile_completed: lastName ? true : false
      };
      
      mockDatabase.clients.push(newClient);
      
      return {
        client_id: newClient.id,
        is_new_client: true,
        card_number: newClient.card_number,
        full_name: newClient.full_name,
        balance: newClient.balance
      };
    }
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è Telegram –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const mockContacts = [
  {
    phone_number: '+79001234567',
    first_name: '–î–º–∏—Ç—Ä–∏–π',
    last_name: '–ö–æ–∑–ª–æ–≤'
  },
  {
    phone_number: '89007654321', // –ù—É–∂–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    first_name: '–ï–ª–µ–Ω–∞',
    last_name: null // –¢–æ–ª—å–∫–æ –∏–º—è
  },
  {
    phone_number: '+79161234567', // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
    first_name: '–°–µ—Ä–≥–µ–π',
    last_name: '–ò–≤–∞–Ω–æ–≤'
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log(`   –ö–ª–∏–µ–Ω—Ç–æ–≤: ${mockDatabase.clients.length}`);
console.log(`   –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${mockDatabase.nextCardNumber}`);

mockDatabase.clients.forEach((client, index) => {
  console.log(`   ${index + 1}. –ö–∞—Ä—Ç–∞: ${client.card_number}, ${client.full_name}, ${client.auth_method}`);
});

const clientService = new MockClientService();

console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç:');
console.log('-'.repeat(60));

mockContacts.forEach((contact, index) => {
  console.log(`\nüì± –¢–µ—Å—Ç ${index + 1}: –ö–æ–Ω—Ç–∞–∫—Ç ${contact.first_name} ${contact.last_name || ''}`);
  console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${contact.phone_number}`);
  
  const normalized = clientService.normalizePhone(contact.phone_number);
  console.log(`   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: ${normalized}`);
  
  const result = clientService.findOrCreateByPhone(
    contact.phone_number,
    123456789 + index,
    contact.first_name,
    contact.last_name
  );
  
  console.log(`   ${result.is_new_client ? 'üÜï –ù–û–í–´–ô' : 'üîÑ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô'} –∫–ª–∏–µ–Ω—Ç:`);
  console.log(`      ID: ${result.client_id}`);
  console.log(`      –ö–∞—Ä—Ç–∞: ${result.card_number}`);
  console.log(`      –ò–º—è: ${result.full_name}`);
  console.log(`      –ë–∞–ª–∞–Ω—Å: ${result.balance} –±–∞–ª–ª–æ–≤`);
});

console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log(`   –ö–ª–∏–µ–Ω—Ç–æ–≤: ${mockDatabase.clients.length}`);

mockDatabase.clients.forEach((client, index) => {
  console.log(`   ${index + 1}. –ö–∞—Ä—Ç–∞: ${client.card_number}, ${client.full_name}, –ë–∞–ª–∞–Ω—Å: ${client.balance}, ${client.auth_method}`);
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
console.log('-'.repeat(60));

const existingClient = clientService.getByTelegramId(111111111);
if (existingClient) {
  console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID:');
  console.log(`   –ö–∞—Ä—Ç–∞: ${existingClient.card_number}`);
  console.log(`   –ò–º—è: ${existingClient.full_name}`);
  console.log(`   –ë–∞–ª–∞–Ω—Å: ${existingClient.balance} –±–∞–ª–ª–æ–≤`);
  console.log(`   –ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${existingClient.auth_method}`);
}

// –í—ã–≤–æ–¥—ã
console.log('\n' + '='.repeat(60));
console.log('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('='.repeat(60));

console.log('\n‚úÖ –£–°–ü–ï–®–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û:');
console.log('   üî¢ –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç (1, 2, 3, 4, 5...)');
console.log('   üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
console.log('   üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç');
console.log('   üîÑ –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É');
console.log('   üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (100 –±–∞–ª–ª–æ–≤)');
console.log('   üÜî –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram ID');
console.log('   üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏');

console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ!');

console.log('\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:');
console.log('   1. üê≥ docker-compose down');
console.log('   2. üíæ –°–æ–∑–¥–∞–π—Ç–µ backup –ë–î');
console.log('   3. ‚ö° npm run migrate-phone-auth');
console.log('   4. üöÄ docker-compose up -d --build');
console.log('   5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram –±–æ—Ç–æ–º');

console.log('\nüí° –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:');
console.log('   ‚Ä¢ –í—Ö–æ–¥ –≤ 1 –∫–ª–∏–∫ —á–µ—Ä–µ–∑ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"');
console.log('   ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç: 1, 2, 3...');
console.log('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã');
console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É');
console.log('   ‚Ä¢ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');

console.log('\n' + '='.repeat(60));